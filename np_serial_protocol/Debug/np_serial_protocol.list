
np_serial_protocol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002eac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c4  08002fb8  08002fb8  00012fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800337c  0800337c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800337c  0800337c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800337c  0800337c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800337c  0800337c  0001337c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003380  08003380  00013380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003384  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000070  080033f4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  080033f4  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006ed1  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a78  00000000  00000000  00026f6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b0  00000000  00000000  000289e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006f8  00000000  00000000  00029198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182cd  00000000  00000000  00029890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000916e  00000000  00000000  00041b5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083a91  00000000  00000000  0004accb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ce75c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002564  00000000  00000000  000ce7ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002fa0 	.word	0x08002fa0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002fa0 	.word	0x08002fa0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fab8 	bl	80006c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f80d 	bl	8000172 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8b8 	bl	80002cc <MX_GPIO_Init>
  MX_CRC_Init();
 800015c:	f000 f84e 	bl	80001fc <MX_CRC_Init>
  MX_USART1_UART_Init();
 8000160:	f000 f860 	bl	8000224 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000164:	f000 f888 	bl	8000278 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  init();
 8000168:	f001 fd02 	bl	8001b70 <init>
  while (1)
  {
	  loop();
 800016c:	f001 fd18 	bl	8001ba0 <loop>
 8000170:	e7fc      	b.n	800016c <main+0x20>

08000172 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000172:	b580      	push	{r7, lr}
 8000174:	b090      	sub	sp, #64	; 0x40
 8000176:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000178:	f107 0318 	add.w	r3, r7, #24
 800017c:	2228      	movs	r2, #40	; 0x28
 800017e:	2100      	movs	r1, #0
 8000180:	4618      	mov	r0, r3
 8000182:	f001 ff5b 	bl	800203c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000186:	1d3b      	adds	r3, r7, #4
 8000188:	2200      	movs	r2, #0
 800018a:	601a      	str	r2, [r3, #0]
 800018c:	605a      	str	r2, [r3, #4]
 800018e:	609a      	str	r2, [r3, #8]
 8000190:	60da      	str	r2, [r3, #12]
 8000192:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000194:	2301      	movs	r3, #1
 8000196:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000198:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800019c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800019e:	2300      	movs	r3, #0
 80001a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a2:	2301      	movs	r3, #1
 80001a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001a6:	2302      	movs	r3, #2
 80001a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001b0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b6:	f107 0318 	add.w	r3, r7, #24
 80001ba:	4618      	mov	r0, r3
 80001bc:	f000 fdb2 	bl	8000d24 <HAL_RCC_OscConfig>
 80001c0:	4603      	mov	r3, r0
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d001      	beq.n	80001ca <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001c6:	f000 f8cd 	bl	8000364 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ca:	230f      	movs	r3, #15
 80001cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001ce:	2302      	movs	r3, #2
 80001d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d2:	2300      	movs	r3, #0
 80001d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001dc:	2300      	movs	r3, #0
 80001de:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001e0:	1d3b      	adds	r3, r7, #4
 80001e2:	2102      	movs	r1, #2
 80001e4:	4618      	mov	r0, r3
 80001e6:	f001 f81f 	bl	8001228 <HAL_RCC_ClockConfig>
 80001ea:	4603      	mov	r3, r0
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d001      	beq.n	80001f4 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80001f0:	f000 f8b8 	bl	8000364 <Error_Handler>
  }
}
 80001f4:	bf00      	nop
 80001f6:	3740      	adds	r7, #64	; 0x40
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}

080001fc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000200:	4b06      	ldr	r3, [pc, #24]	; (800021c <MX_CRC_Init+0x20>)
 8000202:	4a07      	ldr	r2, [pc, #28]	; (8000220 <MX_CRC_Init+0x24>)
 8000204:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000206:	4805      	ldr	r0, [pc, #20]	; (800021c <MX_CRC_Init+0x20>)
 8000208:	f000 fba1 	bl	800094e <HAL_CRC_Init>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d001      	beq.n	8000216 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000212:	f000 f8a7 	bl	8000364 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	2000008c 	.word	0x2000008c
 8000220:	40023000 	.word	0x40023000

08000224 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000228:	4b11      	ldr	r3, [pc, #68]	; (8000270 <MX_USART1_UART_Init+0x4c>)
 800022a:	4a12      	ldr	r2, [pc, #72]	; (8000274 <MX_USART1_UART_Init+0x50>)
 800022c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800022e:	4b10      	ldr	r3, [pc, #64]	; (8000270 <MX_USART1_UART_Init+0x4c>)
 8000230:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000234:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000236:	4b0e      	ldr	r3, [pc, #56]	; (8000270 <MX_USART1_UART_Init+0x4c>)
 8000238:	2200      	movs	r2, #0
 800023a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800023c:	4b0c      	ldr	r3, [pc, #48]	; (8000270 <MX_USART1_UART_Init+0x4c>)
 800023e:	2200      	movs	r2, #0
 8000240:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000242:	4b0b      	ldr	r3, [pc, #44]	; (8000270 <MX_USART1_UART_Init+0x4c>)
 8000244:	2200      	movs	r2, #0
 8000246:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000248:	4b09      	ldr	r3, [pc, #36]	; (8000270 <MX_USART1_UART_Init+0x4c>)
 800024a:	220c      	movs	r2, #12
 800024c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800024e:	4b08      	ldr	r3, [pc, #32]	; (8000270 <MX_USART1_UART_Init+0x4c>)
 8000250:	2200      	movs	r2, #0
 8000252:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000254:	4b06      	ldr	r3, [pc, #24]	; (8000270 <MX_USART1_UART_Init+0x4c>)
 8000256:	2200      	movs	r2, #0
 8000258:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800025a:	4805      	ldr	r0, [pc, #20]	; (8000270 <MX_USART1_UART_Init+0x4c>)
 800025c:	f001 f97c 	bl	8001558 <HAL_UART_Init>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000266:	f000 f87d 	bl	8000364 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800026a:	bf00      	nop
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	20000094 	.word	0x20000094
 8000274:	40013800 	.word	0x40013800

08000278 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800027c:	4b11      	ldr	r3, [pc, #68]	; (80002c4 <MX_USART2_UART_Init+0x4c>)
 800027e:	4a12      	ldr	r2, [pc, #72]	; (80002c8 <MX_USART2_UART_Init+0x50>)
 8000280:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <MX_USART2_UART_Init+0x4c>)
 8000284:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000288:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800028a:	4b0e      	ldr	r3, [pc, #56]	; (80002c4 <MX_USART2_UART_Init+0x4c>)
 800028c:	2200      	movs	r2, #0
 800028e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000290:	4b0c      	ldr	r3, [pc, #48]	; (80002c4 <MX_USART2_UART_Init+0x4c>)
 8000292:	2200      	movs	r2, #0
 8000294:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000296:	4b0b      	ldr	r3, [pc, #44]	; (80002c4 <MX_USART2_UART_Init+0x4c>)
 8000298:	2200      	movs	r2, #0
 800029a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800029c:	4b09      	ldr	r3, [pc, #36]	; (80002c4 <MX_USART2_UART_Init+0x4c>)
 800029e:	220c      	movs	r2, #12
 80002a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002a2:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <MX_USART2_UART_Init+0x4c>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002a8:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <MX_USART2_UART_Init+0x4c>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 80002ae:	4805      	ldr	r0, [pc, #20]	; (80002c4 <MX_USART2_UART_Init+0x4c>)
 80002b0:	f001 f99f 	bl	80015f2 <HAL_HalfDuplex_Init>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80002ba:	f000 f853 	bl	8000364 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	200000d8 	.word	0x200000d8
 80002c8:	40004400 	.word	0x40004400

080002cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b088      	sub	sp, #32
 80002d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002d2:	f107 0310 	add.w	r3, r7, #16
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	605a      	str	r2, [r3, #4]
 80002dc:	609a      	str	r2, [r3, #8]
 80002de:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002e0:	4b1e      	ldr	r3, [pc, #120]	; (800035c <MX_GPIO_Init+0x90>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	4a1d      	ldr	r2, [pc, #116]	; (800035c <MX_GPIO_Init+0x90>)
 80002e6:	f043 0310 	orr.w	r3, r3, #16
 80002ea:	6193      	str	r3, [r2, #24]
 80002ec:	4b1b      	ldr	r3, [pc, #108]	; (800035c <MX_GPIO_Init+0x90>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	f003 0310 	and.w	r3, r3, #16
 80002f4:	60fb      	str	r3, [r7, #12]
 80002f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002f8:	4b18      	ldr	r3, [pc, #96]	; (800035c <MX_GPIO_Init+0x90>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	4a17      	ldr	r2, [pc, #92]	; (800035c <MX_GPIO_Init+0x90>)
 80002fe:	f043 0320 	orr.w	r3, r3, #32
 8000302:	6193      	str	r3, [r2, #24]
 8000304:	4b15      	ldr	r3, [pc, #84]	; (800035c <MX_GPIO_Init+0x90>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	f003 0320 	and.w	r3, r3, #32
 800030c:	60bb      	str	r3, [r7, #8]
 800030e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000310:	4b12      	ldr	r3, [pc, #72]	; (800035c <MX_GPIO_Init+0x90>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	4a11      	ldr	r2, [pc, #68]	; (800035c <MX_GPIO_Init+0x90>)
 8000316:	f043 0304 	orr.w	r3, r3, #4
 800031a:	6193      	str	r3, [r2, #24]
 800031c:	4b0f      	ldr	r3, [pc, #60]	; (800035c <MX_GPIO_Init+0x90>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	f003 0304 	and.w	r3, r3, #4
 8000324:	607b      	str	r3, [r7, #4]
 8000326:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000328:	2200      	movs	r2, #0
 800032a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800032e:	480c      	ldr	r0, [pc, #48]	; (8000360 <MX_GPIO_Init+0x94>)
 8000330:	f000 fce0 	bl	8000cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000334:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000338:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800033a:	2301      	movs	r3, #1
 800033c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033e:	2300      	movs	r3, #0
 8000340:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000342:	2302      	movs	r3, #2
 8000344:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000346:	f107 0310 	add.w	r3, r7, #16
 800034a:	4619      	mov	r1, r3
 800034c:	4804      	ldr	r0, [pc, #16]	; (8000360 <MX_GPIO_Init+0x94>)
 800034e:	f000 fb4d 	bl	80009ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000352:	bf00      	nop
 8000354:	3720      	adds	r7, #32
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	40021000 	.word	0x40021000
 8000360:	40011000 	.word	0x40011000

08000364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000368:	b672      	cpsid	i
}
 800036a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800036c:	e7fe      	b.n	800036c <Error_Handler+0x8>
	...

08000370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000376:	4b0e      	ldr	r3, [pc, #56]	; (80003b0 <HAL_MspInit+0x40>)
 8000378:	699b      	ldr	r3, [r3, #24]
 800037a:	4a0d      	ldr	r2, [pc, #52]	; (80003b0 <HAL_MspInit+0x40>)
 800037c:	f043 0301 	orr.w	r3, r3, #1
 8000380:	6193      	str	r3, [r2, #24]
 8000382:	4b0b      	ldr	r3, [pc, #44]	; (80003b0 <HAL_MspInit+0x40>)
 8000384:	699b      	ldr	r3, [r3, #24]
 8000386:	f003 0301 	and.w	r3, r3, #1
 800038a:	607b      	str	r3, [r7, #4]
 800038c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800038e:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <HAL_MspInit+0x40>)
 8000390:	69db      	ldr	r3, [r3, #28]
 8000392:	4a07      	ldr	r2, [pc, #28]	; (80003b0 <HAL_MspInit+0x40>)
 8000394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000398:	61d3      	str	r3, [r2, #28]
 800039a:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <HAL_MspInit+0x40>)
 800039c:	69db      	ldr	r3, [r3, #28]
 800039e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003a2:	603b      	str	r3, [r7, #0]
 80003a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003a6:	bf00      	nop
 80003a8:	370c      	adds	r7, #12
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bc80      	pop	{r7}
 80003ae:	4770      	bx	lr
 80003b0:	40021000 	.word	0x40021000

080003b4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b085      	sub	sp, #20
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a09      	ldr	r2, [pc, #36]	; (80003e8 <HAL_CRC_MspInit+0x34>)
 80003c2:	4293      	cmp	r3, r2
 80003c4:	d10b      	bne.n	80003de <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80003c6:	4b09      	ldr	r3, [pc, #36]	; (80003ec <HAL_CRC_MspInit+0x38>)
 80003c8:	695b      	ldr	r3, [r3, #20]
 80003ca:	4a08      	ldr	r2, [pc, #32]	; (80003ec <HAL_CRC_MspInit+0x38>)
 80003cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003d0:	6153      	str	r3, [r2, #20]
 80003d2:	4b06      	ldr	r3, [pc, #24]	; (80003ec <HAL_CRC_MspInit+0x38>)
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80003de:	bf00      	nop
 80003e0:	3714      	adds	r7, #20
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bc80      	pop	{r7}
 80003e6:	4770      	bx	lr
 80003e8:	40023000 	.word	0x40023000
 80003ec:	40021000 	.word	0x40021000

080003f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b08a      	sub	sp, #40	; 0x28
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f8:	f107 0318 	add.w	r3, r7, #24
 80003fc:	2200      	movs	r2, #0
 80003fe:	601a      	str	r2, [r3, #0]
 8000400:	605a      	str	r2, [r3, #4]
 8000402:	609a      	str	r2, [r3, #8]
 8000404:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4a31      	ldr	r2, [pc, #196]	; (80004d0 <HAL_UART_MspInit+0xe0>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d132      	bne.n	8000476 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000410:	4b30      	ldr	r3, [pc, #192]	; (80004d4 <HAL_UART_MspInit+0xe4>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	4a2f      	ldr	r2, [pc, #188]	; (80004d4 <HAL_UART_MspInit+0xe4>)
 8000416:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800041a:	6193      	str	r3, [r2, #24]
 800041c:	4b2d      	ldr	r3, [pc, #180]	; (80004d4 <HAL_UART_MspInit+0xe4>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000424:	617b      	str	r3, [r7, #20]
 8000426:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000428:	4b2a      	ldr	r3, [pc, #168]	; (80004d4 <HAL_UART_MspInit+0xe4>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	4a29      	ldr	r2, [pc, #164]	; (80004d4 <HAL_UART_MspInit+0xe4>)
 800042e:	f043 0304 	orr.w	r3, r3, #4
 8000432:	6193      	str	r3, [r2, #24]
 8000434:	4b27      	ldr	r3, [pc, #156]	; (80004d4 <HAL_UART_MspInit+0xe4>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	f003 0304 	and.w	r3, r3, #4
 800043c:	613b      	str	r3, [r7, #16]
 800043e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000440:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000444:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000446:	2302      	movs	r3, #2
 8000448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800044a:	2303      	movs	r3, #3
 800044c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800044e:	f107 0318 	add.w	r3, r7, #24
 8000452:	4619      	mov	r1, r3
 8000454:	4820      	ldr	r0, [pc, #128]	; (80004d8 <HAL_UART_MspInit+0xe8>)
 8000456:	f000 fac9 	bl	80009ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800045a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800045e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000460:	2300      	movs	r3, #0
 8000462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000464:	2300      	movs	r3, #0
 8000466:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000468:	f107 0318 	add.w	r3, r7, #24
 800046c:	4619      	mov	r1, r3
 800046e:	481a      	ldr	r0, [pc, #104]	; (80004d8 <HAL_UART_MspInit+0xe8>)
 8000470:	f000 fabc 	bl	80009ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000474:	e028      	b.n	80004c8 <HAL_UART_MspInit+0xd8>
  else if(huart->Instance==USART2)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4a18      	ldr	r2, [pc, #96]	; (80004dc <HAL_UART_MspInit+0xec>)
 800047c:	4293      	cmp	r3, r2
 800047e:	d123      	bne.n	80004c8 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000480:	4b14      	ldr	r3, [pc, #80]	; (80004d4 <HAL_UART_MspInit+0xe4>)
 8000482:	69db      	ldr	r3, [r3, #28]
 8000484:	4a13      	ldr	r2, [pc, #76]	; (80004d4 <HAL_UART_MspInit+0xe4>)
 8000486:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800048a:	61d3      	str	r3, [r2, #28]
 800048c:	4b11      	ldr	r3, [pc, #68]	; (80004d4 <HAL_UART_MspInit+0xe4>)
 800048e:	69db      	ldr	r3, [r3, #28]
 8000490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000494:	60fb      	str	r3, [r7, #12]
 8000496:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000498:	4b0e      	ldr	r3, [pc, #56]	; (80004d4 <HAL_UART_MspInit+0xe4>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	4a0d      	ldr	r2, [pc, #52]	; (80004d4 <HAL_UART_MspInit+0xe4>)
 800049e:	f043 0304 	orr.w	r3, r3, #4
 80004a2:	6193      	str	r3, [r2, #24]
 80004a4:	4b0b      	ldr	r3, [pc, #44]	; (80004d4 <HAL_UART_MspInit+0xe4>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	f003 0304 	and.w	r3, r3, #4
 80004ac:	60bb      	str	r3, [r7, #8]
 80004ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80004b0:	2304      	movs	r3, #4
 80004b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004b4:	2312      	movs	r3, #18
 80004b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004b8:	2303      	movs	r3, #3
 80004ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004bc:	f107 0318 	add.w	r3, r7, #24
 80004c0:	4619      	mov	r1, r3
 80004c2:	4805      	ldr	r0, [pc, #20]	; (80004d8 <HAL_UART_MspInit+0xe8>)
 80004c4:	f000 fa92 	bl	80009ec <HAL_GPIO_Init>
}
 80004c8:	bf00      	nop
 80004ca:	3728      	adds	r7, #40	; 0x28
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	40013800 	.word	0x40013800
 80004d4:	40021000 	.word	0x40021000
 80004d8:	40010800 	.word	0x40010800
 80004dc:	40004400 	.word	0x40004400

080004e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004e4:	e7fe      	b.n	80004e4 <NMI_Handler+0x4>

080004e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004e6:	b480      	push	{r7}
 80004e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ea:	e7fe      	b.n	80004ea <HardFault_Handler+0x4>

080004ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004f0:	e7fe      	b.n	80004f0 <MemManage_Handler+0x4>

080004f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004f2:	b480      	push	{r7}
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004f6:	e7fe      	b.n	80004f6 <BusFault_Handler+0x4>

080004f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004fc:	e7fe      	b.n	80004fc <UsageFault_Handler+0x4>

080004fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004fe:	b480      	push	{r7}
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000502:	bf00      	nop
 8000504:	46bd      	mov	sp, r7
 8000506:	bc80      	pop	{r7}
 8000508:	4770      	bx	lr

0800050a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800050a:	b480      	push	{r7}
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800050e:	bf00      	nop
 8000510:	46bd      	mov	sp, r7
 8000512:	bc80      	pop	{r7}
 8000514:	4770      	bx	lr

08000516 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000516:	b480      	push	{r7}
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800051a:	bf00      	nop
 800051c:	46bd      	mov	sp, r7
 800051e:	bc80      	pop	{r7}
 8000520:	4770      	bx	lr

08000522 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000522:	b580      	push	{r7, lr}
 8000524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000526:	f000 f913 	bl	8000750 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}

0800052e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800052e:	b580      	push	{r7, lr}
 8000530:	b086      	sub	sp, #24
 8000532:	af00      	add	r7, sp, #0
 8000534:	60f8      	str	r0, [r7, #12]
 8000536:	60b9      	str	r1, [r7, #8]
 8000538:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800053a:	2300      	movs	r3, #0
 800053c:	617b      	str	r3, [r7, #20]
 800053e:	e00a      	b.n	8000556 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000540:	f3af 8000 	nop.w
 8000544:	4601      	mov	r1, r0
 8000546:	68bb      	ldr	r3, [r7, #8]
 8000548:	1c5a      	adds	r2, r3, #1
 800054a:	60ba      	str	r2, [r7, #8]
 800054c:	b2ca      	uxtb	r2, r1
 800054e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000550:	697b      	ldr	r3, [r7, #20]
 8000552:	3301      	adds	r3, #1
 8000554:	617b      	str	r3, [r7, #20]
 8000556:	697a      	ldr	r2, [r7, #20]
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	429a      	cmp	r2, r3
 800055c:	dbf0      	blt.n	8000540 <_read+0x12>
  }

  return len;
 800055e:	687b      	ldr	r3, [r7, #4]
}
 8000560:	4618      	mov	r0, r3
 8000562:	3718      	adds	r7, #24
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}

08000568 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0
 800056e:	60f8      	str	r0, [r7, #12]
 8000570:	60b9      	str	r1, [r7, #8]
 8000572:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000574:	2300      	movs	r3, #0
 8000576:	617b      	str	r3, [r7, #20]
 8000578:	e009      	b.n	800058e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	1c5a      	adds	r2, r3, #1
 800057e:	60ba      	str	r2, [r7, #8]
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	4618      	mov	r0, r3
 8000584:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	3301      	adds	r3, #1
 800058c:	617b      	str	r3, [r7, #20]
 800058e:	697a      	ldr	r2, [r7, #20]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	429a      	cmp	r2, r3
 8000594:	dbf1      	blt.n	800057a <_write+0x12>
  }
  return len;
 8000596:	687b      	ldr	r3, [r7, #4]
}
 8000598:	4618      	mov	r0, r3
 800059a:	3718      	adds	r7, #24
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}

080005a0 <_close>:

int _close(int file)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bc80      	pop	{r7}
 80005b4:	4770      	bx	lr

080005b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005b6:	b480      	push	{r7}
 80005b8:	b083      	sub	sp, #12
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
 80005be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005c6:	605a      	str	r2, [r3, #4]
  return 0;
 80005c8:	2300      	movs	r3, #0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bc80      	pop	{r7}
 80005d2:	4770      	bx	lr

080005d4 <_isatty>:

int _isatty(int file)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005dc:	2301      	movs	r3, #1
}
 80005de:	4618      	mov	r0, r3
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr

080005e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	60f8      	str	r0, [r7, #12]
 80005f0:	60b9      	str	r1, [r7, #8]
 80005f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005f4:	2300      	movs	r3, #0
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	3714      	adds	r7, #20
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr

08000600 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000608:	4a14      	ldr	r2, [pc, #80]	; (800065c <_sbrk+0x5c>)
 800060a:	4b15      	ldr	r3, [pc, #84]	; (8000660 <_sbrk+0x60>)
 800060c:	1ad3      	subs	r3, r2, r3
 800060e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000614:	4b13      	ldr	r3, [pc, #76]	; (8000664 <_sbrk+0x64>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d102      	bne.n	8000622 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800061c:	4b11      	ldr	r3, [pc, #68]	; (8000664 <_sbrk+0x64>)
 800061e:	4a12      	ldr	r2, [pc, #72]	; (8000668 <_sbrk+0x68>)
 8000620:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000622:	4b10      	ldr	r3, [pc, #64]	; (8000664 <_sbrk+0x64>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4413      	add	r3, r2
 800062a:	693a      	ldr	r2, [r7, #16]
 800062c:	429a      	cmp	r2, r3
 800062e:	d207      	bcs.n	8000640 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000630:	f001 fcda 	bl	8001fe8 <__errno>
 8000634:	4603      	mov	r3, r0
 8000636:	220c      	movs	r2, #12
 8000638:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800063a:	f04f 33ff 	mov.w	r3, #4294967295
 800063e:	e009      	b.n	8000654 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000640:	4b08      	ldr	r3, [pc, #32]	; (8000664 <_sbrk+0x64>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000646:	4b07      	ldr	r3, [pc, #28]	; (8000664 <_sbrk+0x64>)
 8000648:	681a      	ldr	r2, [r3, #0]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4413      	add	r3, r2
 800064e:	4a05      	ldr	r2, [pc, #20]	; (8000664 <_sbrk+0x64>)
 8000650:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000652:	68fb      	ldr	r3, [r7, #12]
}
 8000654:	4618      	mov	r0, r3
 8000656:	3718      	adds	r7, #24
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20005000 	.word	0x20005000
 8000660:	00000400 	.word	0x00000400
 8000664:	2000011c 	.word	0x2000011c
 8000668:	20000140 	.word	0x20000140

0800066c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr

08000678 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000678:	480c      	ldr	r0, [pc, #48]	; (80006ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800067a:	490d      	ldr	r1, [pc, #52]	; (80006b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800067c:	4a0d      	ldr	r2, [pc, #52]	; (80006b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800067e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000680:	e002      	b.n	8000688 <LoopCopyDataInit>

08000682 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000682:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000684:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000686:	3304      	adds	r3, #4

08000688 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000688:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800068a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800068c:	d3f9      	bcc.n	8000682 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800068e:	4a0a      	ldr	r2, [pc, #40]	; (80006b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000690:	4c0a      	ldr	r4, [pc, #40]	; (80006bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000692:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000694:	e001      	b.n	800069a <LoopFillZerobss>

08000696 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000696:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000698:	3204      	adds	r2, #4

0800069a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800069a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800069c:	d3fb      	bcc.n	8000696 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800069e:	f7ff ffe5 	bl	800066c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006a2:	f001 fca7 	bl	8001ff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006a6:	f7ff fd51 	bl	800014c <main>
  bx lr
 80006aa:	4770      	bx	lr
  ldr r0, =_sdata
 80006ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006b0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80006b4:	08003384 	.word	0x08003384
  ldr r2, =_sbss
 80006b8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80006bc:	20000140 	.word	0x20000140

080006c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006c0:	e7fe      	b.n	80006c0 <ADC1_2_IRQHandler>
	...

080006c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006c8:	4b08      	ldr	r3, [pc, #32]	; (80006ec <HAL_Init+0x28>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a07      	ldr	r2, [pc, #28]	; (80006ec <HAL_Init+0x28>)
 80006ce:	f043 0310 	orr.w	r3, r3, #16
 80006d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006d4:	2003      	movs	r0, #3
 80006d6:	f000 f907 	bl	80008e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006da:	2000      	movs	r0, #0
 80006dc:	f000 f808 	bl	80006f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006e0:	f7ff fe46 	bl	8000370 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006e4:	2300      	movs	r3, #0
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40022000 	.word	0x40022000

080006f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006f8:	4b12      	ldr	r3, [pc, #72]	; (8000744 <HAL_InitTick+0x54>)
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <HAL_InitTick+0x58>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	4619      	mov	r1, r3
 8000702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000706:	fbb3 f3f1 	udiv	r3, r3, r1
 800070a:	fbb2 f3f3 	udiv	r3, r2, r3
 800070e:	4618      	mov	r0, r3
 8000710:	f000 f911 	bl	8000936 <HAL_SYSTICK_Config>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800071a:	2301      	movs	r3, #1
 800071c:	e00e      	b.n	800073c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2b0f      	cmp	r3, #15
 8000722:	d80a      	bhi.n	800073a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000724:	2200      	movs	r2, #0
 8000726:	6879      	ldr	r1, [r7, #4]
 8000728:	f04f 30ff 	mov.w	r0, #4294967295
 800072c:	f000 f8e7 	bl	80008fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000730:	4a06      	ldr	r2, [pc, #24]	; (800074c <HAL_InitTick+0x5c>)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000736:	2300      	movs	r3, #0
 8000738:	e000      	b.n	800073c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800073a:	2301      	movs	r3, #1
}
 800073c:	4618      	mov	r0, r3
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20000000 	.word	0x20000000
 8000748:	20000008 	.word	0x20000008
 800074c:	20000004 	.word	0x20000004

08000750 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000754:	4b05      	ldr	r3, [pc, #20]	; (800076c <HAL_IncTick+0x1c>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	461a      	mov	r2, r3
 800075a:	4b05      	ldr	r3, [pc, #20]	; (8000770 <HAL_IncTick+0x20>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4413      	add	r3, r2
 8000760:	4a03      	ldr	r2, [pc, #12]	; (8000770 <HAL_IncTick+0x20>)
 8000762:	6013      	str	r3, [r2, #0]
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr
 800076c:	20000008 	.word	0x20000008
 8000770:	20000120 	.word	0x20000120

08000774 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  return uwTick;
 8000778:	4b02      	ldr	r3, [pc, #8]	; (8000784 <HAL_GetTick+0x10>)
 800077a:	681b      	ldr	r3, [r3, #0]
}
 800077c:	4618      	mov	r0, r3
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr
 8000784:	20000120 	.word	0x20000120

08000788 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	f003 0307 	and.w	r3, r3, #7
 8000796:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <__NVIC_SetPriorityGrouping+0x44>)
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800079e:	68ba      	ldr	r2, [r7, #8]
 80007a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007a4:	4013      	ands	r3, r2
 80007a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007ba:	4a04      	ldr	r2, [pc, #16]	; (80007cc <__NVIC_SetPriorityGrouping+0x44>)
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	60d3      	str	r3, [r2, #12]
}
 80007c0:	bf00      	nop
 80007c2:	3714      	adds	r7, #20
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	e000ed00 	.word	0xe000ed00

080007d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007d4:	4b04      	ldr	r3, [pc, #16]	; (80007e8 <__NVIC_GetPriorityGrouping+0x18>)
 80007d6:	68db      	ldr	r3, [r3, #12]
 80007d8:	0a1b      	lsrs	r3, r3, #8
 80007da:	f003 0307 	and.w	r3, r3, #7
}
 80007de:	4618      	mov	r0, r3
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	e000ed00 	.word	0xe000ed00

080007ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	6039      	str	r1, [r7, #0]
 80007f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	db0a      	blt.n	8000816 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	b2da      	uxtb	r2, r3
 8000804:	490c      	ldr	r1, [pc, #48]	; (8000838 <__NVIC_SetPriority+0x4c>)
 8000806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080a:	0112      	lsls	r2, r2, #4
 800080c:	b2d2      	uxtb	r2, r2
 800080e:	440b      	add	r3, r1
 8000810:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000814:	e00a      	b.n	800082c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	b2da      	uxtb	r2, r3
 800081a:	4908      	ldr	r1, [pc, #32]	; (800083c <__NVIC_SetPriority+0x50>)
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	f003 030f 	and.w	r3, r3, #15
 8000822:	3b04      	subs	r3, #4
 8000824:	0112      	lsls	r2, r2, #4
 8000826:	b2d2      	uxtb	r2, r2
 8000828:	440b      	add	r3, r1
 800082a:	761a      	strb	r2, [r3, #24]
}
 800082c:	bf00      	nop
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	bc80      	pop	{r7}
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	e000e100 	.word	0xe000e100
 800083c:	e000ed00 	.word	0xe000ed00

08000840 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000840:	b480      	push	{r7}
 8000842:	b089      	sub	sp, #36	; 0x24
 8000844:	af00      	add	r7, sp, #0
 8000846:	60f8      	str	r0, [r7, #12]
 8000848:	60b9      	str	r1, [r7, #8]
 800084a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	f003 0307 	and.w	r3, r3, #7
 8000852:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000854:	69fb      	ldr	r3, [r7, #28]
 8000856:	f1c3 0307 	rsb	r3, r3, #7
 800085a:	2b04      	cmp	r3, #4
 800085c:	bf28      	it	cs
 800085e:	2304      	movcs	r3, #4
 8000860:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	3304      	adds	r3, #4
 8000866:	2b06      	cmp	r3, #6
 8000868:	d902      	bls.n	8000870 <NVIC_EncodePriority+0x30>
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	3b03      	subs	r3, #3
 800086e:	e000      	b.n	8000872 <NVIC_EncodePriority+0x32>
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000874:	f04f 32ff 	mov.w	r2, #4294967295
 8000878:	69bb      	ldr	r3, [r7, #24]
 800087a:	fa02 f303 	lsl.w	r3, r2, r3
 800087e:	43da      	mvns	r2, r3
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	401a      	ands	r2, r3
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000888:	f04f 31ff 	mov.w	r1, #4294967295
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	fa01 f303 	lsl.w	r3, r1, r3
 8000892:	43d9      	mvns	r1, r3
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000898:	4313      	orrs	r3, r2
         );
}
 800089a:	4618      	mov	r0, r3
 800089c:	3724      	adds	r7, #36	; 0x24
 800089e:	46bd      	mov	sp, r7
 80008a0:	bc80      	pop	{r7}
 80008a2:	4770      	bx	lr

080008a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	3b01      	subs	r3, #1
 80008b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008b4:	d301      	bcc.n	80008ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008b6:	2301      	movs	r3, #1
 80008b8:	e00f      	b.n	80008da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ba:	4a0a      	ldr	r2, [pc, #40]	; (80008e4 <SysTick_Config+0x40>)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	3b01      	subs	r3, #1
 80008c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008c2:	210f      	movs	r1, #15
 80008c4:	f04f 30ff 	mov.w	r0, #4294967295
 80008c8:	f7ff ff90 	bl	80007ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008cc:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <SysTick_Config+0x40>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008d2:	4b04      	ldr	r3, [pc, #16]	; (80008e4 <SysTick_Config+0x40>)
 80008d4:	2207      	movs	r2, #7
 80008d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008d8:	2300      	movs	r3, #0
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	e000e010 	.word	0xe000e010

080008e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f7ff ff49 	bl	8000788 <__NVIC_SetPriorityGrouping>
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008fe:	b580      	push	{r7, lr}
 8000900:	b086      	sub	sp, #24
 8000902:	af00      	add	r7, sp, #0
 8000904:	4603      	mov	r3, r0
 8000906:	60b9      	str	r1, [r7, #8]
 8000908:	607a      	str	r2, [r7, #4]
 800090a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000910:	f7ff ff5e 	bl	80007d0 <__NVIC_GetPriorityGrouping>
 8000914:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000916:	687a      	ldr	r2, [r7, #4]
 8000918:	68b9      	ldr	r1, [r7, #8]
 800091a:	6978      	ldr	r0, [r7, #20]
 800091c:	f7ff ff90 	bl	8000840 <NVIC_EncodePriority>
 8000920:	4602      	mov	r2, r0
 8000922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000926:	4611      	mov	r1, r2
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff ff5f 	bl	80007ec <__NVIC_SetPriority>
}
 800092e:	bf00      	nop
 8000930:	3718      	adds	r7, #24
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	b082      	sub	sp, #8
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f7ff ffb0 	bl	80008a4 <SysTick_Config>
 8000944:	4603      	mov	r3, r0
}
 8000946:	4618      	mov	r0, r3
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b082      	sub	sp, #8
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d101      	bne.n	8000960 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800095c:	2301      	movs	r3, #1
 800095e:	e00e      	b.n	800097e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	795b      	ldrb	r3, [r3, #5]
 8000964:	b2db      	uxtb	r3, r3
 8000966:	2b00      	cmp	r3, #0
 8000968:	d105      	bne.n	8000976 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2200      	movs	r2, #0
 800096e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f7ff fd1f 	bl	80003b4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2201      	movs	r2, #1
 800097a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800097c:	2300      	movs	r3, #0
}
 800097e:	4618      	mov	r0, r3
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8000986:	b480      	push	{r7}
 8000988:	b087      	sub	sp, #28
 800098a:	af00      	add	r7, sp, #0
 800098c:	60f8      	str	r0, [r7, #12]
 800098e:	60b9      	str	r1, [r7, #8]
 8000990:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	2202      	movs	r2, #2
 800099a:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	689a      	ldr	r2, [r3, #8]
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f042 0201 	orr.w	r2, r2, #1
 80009aa:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]
 80009b0:	e00a      	b.n	80009c8 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	68ba      	ldr	r2, [r7, #8]
 80009b8:	441a      	add	r2, r3
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	6812      	ldr	r2, [r2, #0]
 80009c0:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	3301      	adds	r3, #1
 80009c6:	617b      	str	r3, [r7, #20]
 80009c8:	697a      	ldr	r2, [r7, #20]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d3f0      	bcc.n	80009b2 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	2201      	movs	r2, #1
 80009dc:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80009de:	693b      	ldr	r3, [r7, #16]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	371c      	adds	r7, #28
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bc80      	pop	{r7}
 80009e8:	4770      	bx	lr
	...

080009ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b08b      	sub	sp, #44	; 0x2c
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009fa:	2300      	movs	r3, #0
 80009fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009fe:	e169      	b.n	8000cd4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a00:	2201      	movs	r2, #1
 8000a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a04:	fa02 f303 	lsl.w	r3, r2, r3
 8000a08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	69fa      	ldr	r2, [r7, #28]
 8000a10:	4013      	ands	r3, r2
 8000a12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a14:	69ba      	ldr	r2, [r7, #24]
 8000a16:	69fb      	ldr	r3, [r7, #28]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	f040 8158 	bne.w	8000cce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	4a9a      	ldr	r2, [pc, #616]	; (8000c8c <HAL_GPIO_Init+0x2a0>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d05e      	beq.n	8000ae6 <HAL_GPIO_Init+0xfa>
 8000a28:	4a98      	ldr	r2, [pc, #608]	; (8000c8c <HAL_GPIO_Init+0x2a0>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d875      	bhi.n	8000b1a <HAL_GPIO_Init+0x12e>
 8000a2e:	4a98      	ldr	r2, [pc, #608]	; (8000c90 <HAL_GPIO_Init+0x2a4>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d058      	beq.n	8000ae6 <HAL_GPIO_Init+0xfa>
 8000a34:	4a96      	ldr	r2, [pc, #600]	; (8000c90 <HAL_GPIO_Init+0x2a4>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d86f      	bhi.n	8000b1a <HAL_GPIO_Init+0x12e>
 8000a3a:	4a96      	ldr	r2, [pc, #600]	; (8000c94 <HAL_GPIO_Init+0x2a8>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d052      	beq.n	8000ae6 <HAL_GPIO_Init+0xfa>
 8000a40:	4a94      	ldr	r2, [pc, #592]	; (8000c94 <HAL_GPIO_Init+0x2a8>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d869      	bhi.n	8000b1a <HAL_GPIO_Init+0x12e>
 8000a46:	4a94      	ldr	r2, [pc, #592]	; (8000c98 <HAL_GPIO_Init+0x2ac>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d04c      	beq.n	8000ae6 <HAL_GPIO_Init+0xfa>
 8000a4c:	4a92      	ldr	r2, [pc, #584]	; (8000c98 <HAL_GPIO_Init+0x2ac>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d863      	bhi.n	8000b1a <HAL_GPIO_Init+0x12e>
 8000a52:	4a92      	ldr	r2, [pc, #584]	; (8000c9c <HAL_GPIO_Init+0x2b0>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d046      	beq.n	8000ae6 <HAL_GPIO_Init+0xfa>
 8000a58:	4a90      	ldr	r2, [pc, #576]	; (8000c9c <HAL_GPIO_Init+0x2b0>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d85d      	bhi.n	8000b1a <HAL_GPIO_Init+0x12e>
 8000a5e:	2b12      	cmp	r3, #18
 8000a60:	d82a      	bhi.n	8000ab8 <HAL_GPIO_Init+0xcc>
 8000a62:	2b12      	cmp	r3, #18
 8000a64:	d859      	bhi.n	8000b1a <HAL_GPIO_Init+0x12e>
 8000a66:	a201      	add	r2, pc, #4	; (adr r2, 8000a6c <HAL_GPIO_Init+0x80>)
 8000a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a6c:	08000ae7 	.word	0x08000ae7
 8000a70:	08000ac1 	.word	0x08000ac1
 8000a74:	08000ad3 	.word	0x08000ad3
 8000a78:	08000b15 	.word	0x08000b15
 8000a7c:	08000b1b 	.word	0x08000b1b
 8000a80:	08000b1b 	.word	0x08000b1b
 8000a84:	08000b1b 	.word	0x08000b1b
 8000a88:	08000b1b 	.word	0x08000b1b
 8000a8c:	08000b1b 	.word	0x08000b1b
 8000a90:	08000b1b 	.word	0x08000b1b
 8000a94:	08000b1b 	.word	0x08000b1b
 8000a98:	08000b1b 	.word	0x08000b1b
 8000a9c:	08000b1b 	.word	0x08000b1b
 8000aa0:	08000b1b 	.word	0x08000b1b
 8000aa4:	08000b1b 	.word	0x08000b1b
 8000aa8:	08000b1b 	.word	0x08000b1b
 8000aac:	08000b1b 	.word	0x08000b1b
 8000ab0:	08000ac9 	.word	0x08000ac9
 8000ab4:	08000add 	.word	0x08000add
 8000ab8:	4a79      	ldr	r2, [pc, #484]	; (8000ca0 <HAL_GPIO_Init+0x2b4>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d013      	beq.n	8000ae6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000abe:	e02c      	b.n	8000b1a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	623b      	str	r3, [r7, #32]
          break;
 8000ac6:	e029      	b.n	8000b1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	3304      	adds	r3, #4
 8000ace:	623b      	str	r3, [r7, #32]
          break;
 8000ad0:	e024      	b.n	8000b1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	68db      	ldr	r3, [r3, #12]
 8000ad6:	3308      	adds	r3, #8
 8000ad8:	623b      	str	r3, [r7, #32]
          break;
 8000ada:	e01f      	b.n	8000b1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	330c      	adds	r3, #12
 8000ae2:	623b      	str	r3, [r7, #32]
          break;
 8000ae4:	e01a      	b.n	8000b1c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	689b      	ldr	r3, [r3, #8]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d102      	bne.n	8000af4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000aee:	2304      	movs	r3, #4
 8000af0:	623b      	str	r3, [r7, #32]
          break;
 8000af2:	e013      	b.n	8000b1c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d105      	bne.n	8000b08 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000afc:	2308      	movs	r3, #8
 8000afe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	69fa      	ldr	r2, [r7, #28]
 8000b04:	611a      	str	r2, [r3, #16]
          break;
 8000b06:	e009      	b.n	8000b1c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b08:	2308      	movs	r3, #8
 8000b0a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	69fa      	ldr	r2, [r7, #28]
 8000b10:	615a      	str	r2, [r3, #20]
          break;
 8000b12:	e003      	b.n	8000b1c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b14:	2300      	movs	r3, #0
 8000b16:	623b      	str	r3, [r7, #32]
          break;
 8000b18:	e000      	b.n	8000b1c <HAL_GPIO_Init+0x130>
          break;
 8000b1a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	2bff      	cmp	r3, #255	; 0xff
 8000b20:	d801      	bhi.n	8000b26 <HAL_GPIO_Init+0x13a>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	e001      	b.n	8000b2a <HAL_GPIO_Init+0x13e>
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	3304      	adds	r3, #4
 8000b2a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	2bff      	cmp	r3, #255	; 0xff
 8000b30:	d802      	bhi.n	8000b38 <HAL_GPIO_Init+0x14c>
 8000b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	e002      	b.n	8000b3e <HAL_GPIO_Init+0x152>
 8000b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3a:	3b08      	subs	r3, #8
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	210f      	movs	r1, #15
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4c:	43db      	mvns	r3, r3
 8000b4e:	401a      	ands	r2, r3
 8000b50:	6a39      	ldr	r1, [r7, #32]
 8000b52:	693b      	ldr	r3, [r7, #16]
 8000b54:	fa01 f303 	lsl.w	r3, r1, r3
 8000b58:	431a      	orrs	r2, r3
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f000 80b1 	beq.w	8000cce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b6c:	4b4d      	ldr	r3, [pc, #308]	; (8000ca4 <HAL_GPIO_Init+0x2b8>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	4a4c      	ldr	r2, [pc, #304]	; (8000ca4 <HAL_GPIO_Init+0x2b8>)
 8000b72:	f043 0301 	orr.w	r3, r3, #1
 8000b76:	6193      	str	r3, [r2, #24]
 8000b78:	4b4a      	ldr	r3, [pc, #296]	; (8000ca4 <HAL_GPIO_Init+0x2b8>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	f003 0301 	and.w	r3, r3, #1
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b84:	4a48      	ldr	r2, [pc, #288]	; (8000ca8 <HAL_GPIO_Init+0x2bc>)
 8000b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b88:	089b      	lsrs	r3, r3, #2
 8000b8a:	3302      	adds	r3, #2
 8000b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b90:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b94:	f003 0303 	and.w	r3, r3, #3
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	220f      	movs	r2, #15
 8000b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba0:	43db      	mvns	r3, r3
 8000ba2:	68fa      	ldr	r2, [r7, #12]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4a40      	ldr	r2, [pc, #256]	; (8000cac <HAL_GPIO_Init+0x2c0>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d013      	beq.n	8000bd8 <HAL_GPIO_Init+0x1ec>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4a3f      	ldr	r2, [pc, #252]	; (8000cb0 <HAL_GPIO_Init+0x2c4>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d00d      	beq.n	8000bd4 <HAL_GPIO_Init+0x1e8>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	4a3e      	ldr	r2, [pc, #248]	; (8000cb4 <HAL_GPIO_Init+0x2c8>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d007      	beq.n	8000bd0 <HAL_GPIO_Init+0x1e4>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4a3d      	ldr	r2, [pc, #244]	; (8000cb8 <HAL_GPIO_Init+0x2cc>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d101      	bne.n	8000bcc <HAL_GPIO_Init+0x1e0>
 8000bc8:	2303      	movs	r3, #3
 8000bca:	e006      	b.n	8000bda <HAL_GPIO_Init+0x1ee>
 8000bcc:	2304      	movs	r3, #4
 8000bce:	e004      	b.n	8000bda <HAL_GPIO_Init+0x1ee>
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	e002      	b.n	8000bda <HAL_GPIO_Init+0x1ee>
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	e000      	b.n	8000bda <HAL_GPIO_Init+0x1ee>
 8000bd8:	2300      	movs	r3, #0
 8000bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bdc:	f002 0203 	and.w	r2, r2, #3
 8000be0:	0092      	lsls	r2, r2, #2
 8000be2:	4093      	lsls	r3, r2
 8000be4:	68fa      	ldr	r2, [r7, #12]
 8000be6:	4313      	orrs	r3, r2
 8000be8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bea:	492f      	ldr	r1, [pc, #188]	; (8000ca8 <HAL_GPIO_Init+0x2bc>)
 8000bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bee:	089b      	lsrs	r3, r3, #2
 8000bf0:	3302      	adds	r3, #2
 8000bf2:	68fa      	ldr	r2, [r7, #12]
 8000bf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d006      	beq.n	8000c12 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c04:	4b2d      	ldr	r3, [pc, #180]	; (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	492c      	ldr	r1, [pc, #176]	; (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	600b      	str	r3, [r1, #0]
 8000c10:	e006      	b.n	8000c20 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c12:	4b2a      	ldr	r3, [pc, #168]	; (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	69bb      	ldr	r3, [r7, #24]
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	4928      	ldr	r1, [pc, #160]	; (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d006      	beq.n	8000c3a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c2c:	4b23      	ldr	r3, [pc, #140]	; (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c2e:	685a      	ldr	r2, [r3, #4]
 8000c30:	4922      	ldr	r1, [pc, #136]	; (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	604b      	str	r3, [r1, #4]
 8000c38:	e006      	b.n	8000c48 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c3a:	4b20      	ldr	r3, [pc, #128]	; (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c3c:	685a      	ldr	r2, [r3, #4]
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	43db      	mvns	r3, r3
 8000c42:	491e      	ldr	r1, [pc, #120]	; (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c44:	4013      	ands	r3, r2
 8000c46:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d006      	beq.n	8000c62 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c54:	4b19      	ldr	r3, [pc, #100]	; (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c56:	689a      	ldr	r2, [r3, #8]
 8000c58:	4918      	ldr	r1, [pc, #96]	; (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	608b      	str	r3, [r1, #8]
 8000c60:	e006      	b.n	8000c70 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c62:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c64:	689a      	ldr	r2, [r3, #8]
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	4914      	ldr	r1, [pc, #80]	; (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d021      	beq.n	8000cc0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c7c:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c7e:	68da      	ldr	r2, [r3, #12]
 8000c80:	490e      	ldr	r1, [pc, #56]	; (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c82:	69bb      	ldr	r3, [r7, #24]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	60cb      	str	r3, [r1, #12]
 8000c88:	e021      	b.n	8000cce <HAL_GPIO_Init+0x2e2>
 8000c8a:	bf00      	nop
 8000c8c:	10320000 	.word	0x10320000
 8000c90:	10310000 	.word	0x10310000
 8000c94:	10220000 	.word	0x10220000
 8000c98:	10210000 	.word	0x10210000
 8000c9c:	10120000 	.word	0x10120000
 8000ca0:	10110000 	.word	0x10110000
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	40010000 	.word	0x40010000
 8000cac:	40010800 	.word	0x40010800
 8000cb0:	40010c00 	.word	0x40010c00
 8000cb4:	40011000 	.word	0x40011000
 8000cb8:	40011400 	.word	0x40011400
 8000cbc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <HAL_GPIO_Init+0x304>)
 8000cc2:	68da      	ldr	r2, [r3, #12]
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	4909      	ldr	r1, [pc, #36]	; (8000cf0 <HAL_GPIO_Init+0x304>)
 8000cca:	4013      	ands	r3, r2
 8000ccc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cda:	fa22 f303 	lsr.w	r3, r2, r3
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	f47f ae8e 	bne.w	8000a00 <HAL_GPIO_Init+0x14>
  }
}
 8000ce4:	bf00      	nop
 8000ce6:	bf00      	nop
 8000ce8:	372c      	adds	r7, #44	; 0x2c
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr
 8000cf0:	40010400 	.word	0x40010400

08000cf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	807b      	strh	r3, [r7, #2]
 8000d00:	4613      	mov	r3, r2
 8000d02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d04:	787b      	ldrb	r3, [r7, #1]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d003      	beq.n	8000d12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d0a:	887a      	ldrh	r2, [r7, #2]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d10:	e003      	b.n	8000d1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d12:	887b      	ldrh	r3, [r7, #2]
 8000d14:	041a      	lsls	r2, r3, #16
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	611a      	str	r2, [r3, #16]
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr

08000d24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d101      	bne.n	8000d36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e272      	b.n	800121c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f000 8087 	beq.w	8000e52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d44:	4b92      	ldr	r3, [pc, #584]	; (8000f90 <HAL_RCC_OscConfig+0x26c>)
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f003 030c 	and.w	r3, r3, #12
 8000d4c:	2b04      	cmp	r3, #4
 8000d4e:	d00c      	beq.n	8000d6a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d50:	4b8f      	ldr	r3, [pc, #572]	; (8000f90 <HAL_RCC_OscConfig+0x26c>)
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f003 030c 	and.w	r3, r3, #12
 8000d58:	2b08      	cmp	r3, #8
 8000d5a:	d112      	bne.n	8000d82 <HAL_RCC_OscConfig+0x5e>
 8000d5c:	4b8c      	ldr	r3, [pc, #560]	; (8000f90 <HAL_RCC_OscConfig+0x26c>)
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d68:	d10b      	bne.n	8000d82 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d6a:	4b89      	ldr	r3, [pc, #548]	; (8000f90 <HAL_RCC_OscConfig+0x26c>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d06c      	beq.n	8000e50 <HAL_RCC_OscConfig+0x12c>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d168      	bne.n	8000e50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e24c      	b.n	800121c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d8a:	d106      	bne.n	8000d9a <HAL_RCC_OscConfig+0x76>
 8000d8c:	4b80      	ldr	r3, [pc, #512]	; (8000f90 <HAL_RCC_OscConfig+0x26c>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a7f      	ldr	r2, [pc, #508]	; (8000f90 <HAL_RCC_OscConfig+0x26c>)
 8000d92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d96:	6013      	str	r3, [r2, #0]
 8000d98:	e02e      	b.n	8000df8 <HAL_RCC_OscConfig+0xd4>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d10c      	bne.n	8000dbc <HAL_RCC_OscConfig+0x98>
 8000da2:	4b7b      	ldr	r3, [pc, #492]	; (8000f90 <HAL_RCC_OscConfig+0x26c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a7a      	ldr	r2, [pc, #488]	; (8000f90 <HAL_RCC_OscConfig+0x26c>)
 8000da8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dac:	6013      	str	r3, [r2, #0]
 8000dae:	4b78      	ldr	r3, [pc, #480]	; (8000f90 <HAL_RCC_OscConfig+0x26c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a77      	ldr	r2, [pc, #476]	; (8000f90 <HAL_RCC_OscConfig+0x26c>)
 8000db4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000db8:	6013      	str	r3, [r2, #0]
 8000dba:	e01d      	b.n	8000df8 <HAL_RCC_OscConfig+0xd4>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000dc4:	d10c      	bne.n	8000de0 <HAL_RCC_OscConfig+0xbc>
 8000dc6:	4b72      	ldr	r3, [pc, #456]	; (8000f90 <HAL_RCC_OscConfig+0x26c>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a71      	ldr	r2, [pc, #452]	; (8000f90 <HAL_RCC_OscConfig+0x26c>)
 8000dcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dd0:	6013      	str	r3, [r2, #0]
 8000dd2:	4b6f      	ldr	r3, [pc, #444]	; (8000f90 <HAL_RCC_OscConfig+0x26c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a6e      	ldr	r2, [pc, #440]	; (8000f90 <HAL_RCC_OscConfig+0x26c>)
 8000dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ddc:	6013      	str	r3, [r2, #0]
 8000dde:	e00b      	b.n	8000df8 <HAL_RCC_OscConfig+0xd4>
 8000de0:	4b6b      	ldr	r3, [pc, #428]	; (8000f90 <HAL_RCC_OscConfig+0x26c>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a6a      	ldr	r2, [pc, #424]	; (8000f90 <HAL_RCC_OscConfig+0x26c>)
 8000de6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dea:	6013      	str	r3, [r2, #0]
 8000dec:	4b68      	ldr	r3, [pc, #416]	; (8000f90 <HAL_RCC_OscConfig+0x26c>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a67      	ldr	r2, [pc, #412]	; (8000f90 <HAL_RCC_OscConfig+0x26c>)
 8000df2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000df6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d013      	beq.n	8000e28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e00:	f7ff fcb8 	bl	8000774 <HAL_GetTick>
 8000e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e06:	e008      	b.n	8000e1a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e08:	f7ff fcb4 	bl	8000774 <HAL_GetTick>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	2b64      	cmp	r3, #100	; 0x64
 8000e14:	d901      	bls.n	8000e1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e16:	2303      	movs	r3, #3
 8000e18:	e200      	b.n	800121c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e1a:	4b5d      	ldr	r3, [pc, #372]	; (8000f90 <HAL_RCC_OscConfig+0x26c>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d0f0      	beq.n	8000e08 <HAL_RCC_OscConfig+0xe4>
 8000e26:	e014      	b.n	8000e52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e28:	f7ff fca4 	bl	8000774 <HAL_GetTick>
 8000e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e2e:	e008      	b.n	8000e42 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e30:	f7ff fca0 	bl	8000774 <HAL_GetTick>
 8000e34:	4602      	mov	r2, r0
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	2b64      	cmp	r3, #100	; 0x64
 8000e3c:	d901      	bls.n	8000e42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	e1ec      	b.n	800121c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e42:	4b53      	ldr	r3, [pc, #332]	; (8000f90 <HAL_RCC_OscConfig+0x26c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d1f0      	bne.n	8000e30 <HAL_RCC_OscConfig+0x10c>
 8000e4e:	e000      	b.n	8000e52 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f003 0302 	and.w	r3, r3, #2
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d063      	beq.n	8000f26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e5e:	4b4c      	ldr	r3, [pc, #304]	; (8000f90 <HAL_RCC_OscConfig+0x26c>)
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f003 030c 	and.w	r3, r3, #12
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d00b      	beq.n	8000e82 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e6a:	4b49      	ldr	r3, [pc, #292]	; (8000f90 <HAL_RCC_OscConfig+0x26c>)
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f003 030c 	and.w	r3, r3, #12
 8000e72:	2b08      	cmp	r3, #8
 8000e74:	d11c      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x18c>
 8000e76:	4b46      	ldr	r3, [pc, #280]	; (8000f90 <HAL_RCC_OscConfig+0x26c>)
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d116      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e82:	4b43      	ldr	r3, [pc, #268]	; (8000f90 <HAL_RCC_OscConfig+0x26c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d005      	beq.n	8000e9a <HAL_RCC_OscConfig+0x176>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	691b      	ldr	r3, [r3, #16]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d001      	beq.n	8000e9a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e1c0      	b.n	800121c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e9a:	4b3d      	ldr	r3, [pc, #244]	; (8000f90 <HAL_RCC_OscConfig+0x26c>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	00db      	lsls	r3, r3, #3
 8000ea8:	4939      	ldr	r1, [pc, #228]	; (8000f90 <HAL_RCC_OscConfig+0x26c>)
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eae:	e03a      	b.n	8000f26 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	691b      	ldr	r3, [r3, #16]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d020      	beq.n	8000efa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000eb8:	4b36      	ldr	r3, [pc, #216]	; (8000f94 <HAL_RCC_OscConfig+0x270>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ebe:	f7ff fc59 	bl	8000774 <HAL_GetTick>
 8000ec2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ec4:	e008      	b.n	8000ed8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ec6:	f7ff fc55 	bl	8000774 <HAL_GetTick>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d901      	bls.n	8000ed8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	e1a1      	b.n	800121c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ed8:	4b2d      	ldr	r3, [pc, #180]	; (8000f90 <HAL_RCC_OscConfig+0x26c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f003 0302 	and.w	r3, r3, #2
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d0f0      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ee4:	4b2a      	ldr	r3, [pc, #168]	; (8000f90 <HAL_RCC_OscConfig+0x26c>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	695b      	ldr	r3, [r3, #20]
 8000ef0:	00db      	lsls	r3, r3, #3
 8000ef2:	4927      	ldr	r1, [pc, #156]	; (8000f90 <HAL_RCC_OscConfig+0x26c>)
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	600b      	str	r3, [r1, #0]
 8000ef8:	e015      	b.n	8000f26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000efa:	4b26      	ldr	r3, [pc, #152]	; (8000f94 <HAL_RCC_OscConfig+0x270>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f00:	f7ff fc38 	bl	8000774 <HAL_GetTick>
 8000f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f06:	e008      	b.n	8000f1a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f08:	f7ff fc34 	bl	8000774 <HAL_GetTick>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d901      	bls.n	8000f1a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f16:	2303      	movs	r3, #3
 8000f18:	e180      	b.n	800121c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f1a:	4b1d      	ldr	r3, [pc, #116]	; (8000f90 <HAL_RCC_OscConfig+0x26c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d1f0      	bne.n	8000f08 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f003 0308 	and.w	r3, r3, #8
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d03a      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	699b      	ldr	r3, [r3, #24]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d019      	beq.n	8000f6e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f3a:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <HAL_RCC_OscConfig+0x274>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f40:	f7ff fc18 	bl	8000774 <HAL_GetTick>
 8000f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f46:	e008      	b.n	8000f5a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f48:	f7ff fc14 	bl	8000774 <HAL_GetTick>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d901      	bls.n	8000f5a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f56:	2303      	movs	r3, #3
 8000f58:	e160      	b.n	800121c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f5a:	4b0d      	ldr	r3, [pc, #52]	; (8000f90 <HAL_RCC_OscConfig+0x26c>)
 8000f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5e:	f003 0302 	and.w	r3, r3, #2
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d0f0      	beq.n	8000f48 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f66:	2001      	movs	r0, #1
 8000f68:	f000 fad8 	bl	800151c <RCC_Delay>
 8000f6c:	e01c      	b.n	8000fa8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <HAL_RCC_OscConfig+0x274>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f74:	f7ff fbfe 	bl	8000774 <HAL_GetTick>
 8000f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f7a:	e00f      	b.n	8000f9c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f7c:	f7ff fbfa 	bl	8000774 <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d908      	bls.n	8000f9c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e146      	b.n	800121c <HAL_RCC_OscConfig+0x4f8>
 8000f8e:	bf00      	nop
 8000f90:	40021000 	.word	0x40021000
 8000f94:	42420000 	.word	0x42420000
 8000f98:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f9c:	4b92      	ldr	r3, [pc, #584]	; (80011e8 <HAL_RCC_OscConfig+0x4c4>)
 8000f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa0:	f003 0302 	and.w	r3, r3, #2
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d1e9      	bne.n	8000f7c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f003 0304 	and.w	r3, r3, #4
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	f000 80a6 	beq.w	8001102 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fba:	4b8b      	ldr	r3, [pc, #556]	; (80011e8 <HAL_RCC_OscConfig+0x4c4>)
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d10d      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fc6:	4b88      	ldr	r3, [pc, #544]	; (80011e8 <HAL_RCC_OscConfig+0x4c4>)
 8000fc8:	69db      	ldr	r3, [r3, #28]
 8000fca:	4a87      	ldr	r2, [pc, #540]	; (80011e8 <HAL_RCC_OscConfig+0x4c4>)
 8000fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd0:	61d3      	str	r3, [r2, #28]
 8000fd2:	4b85      	ldr	r3, [pc, #532]	; (80011e8 <HAL_RCC_OscConfig+0x4c4>)
 8000fd4:	69db      	ldr	r3, [r3, #28]
 8000fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fe2:	4b82      	ldr	r3, [pc, #520]	; (80011ec <HAL_RCC_OscConfig+0x4c8>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d118      	bne.n	8001020 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fee:	4b7f      	ldr	r3, [pc, #508]	; (80011ec <HAL_RCC_OscConfig+0x4c8>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a7e      	ldr	r2, [pc, #504]	; (80011ec <HAL_RCC_OscConfig+0x4c8>)
 8000ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ff8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ffa:	f7ff fbbb 	bl	8000774 <HAL_GetTick>
 8000ffe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001000:	e008      	b.n	8001014 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001002:	f7ff fbb7 	bl	8000774 <HAL_GetTick>
 8001006:	4602      	mov	r2, r0
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	2b64      	cmp	r3, #100	; 0x64
 800100e:	d901      	bls.n	8001014 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001010:	2303      	movs	r3, #3
 8001012:	e103      	b.n	800121c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001014:	4b75      	ldr	r3, [pc, #468]	; (80011ec <HAL_RCC_OscConfig+0x4c8>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800101c:	2b00      	cmp	r3, #0
 800101e:	d0f0      	beq.n	8001002 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d106      	bne.n	8001036 <HAL_RCC_OscConfig+0x312>
 8001028:	4b6f      	ldr	r3, [pc, #444]	; (80011e8 <HAL_RCC_OscConfig+0x4c4>)
 800102a:	6a1b      	ldr	r3, [r3, #32]
 800102c:	4a6e      	ldr	r2, [pc, #440]	; (80011e8 <HAL_RCC_OscConfig+0x4c4>)
 800102e:	f043 0301 	orr.w	r3, r3, #1
 8001032:	6213      	str	r3, [r2, #32]
 8001034:	e02d      	b.n	8001092 <HAL_RCC_OscConfig+0x36e>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d10c      	bne.n	8001058 <HAL_RCC_OscConfig+0x334>
 800103e:	4b6a      	ldr	r3, [pc, #424]	; (80011e8 <HAL_RCC_OscConfig+0x4c4>)
 8001040:	6a1b      	ldr	r3, [r3, #32]
 8001042:	4a69      	ldr	r2, [pc, #420]	; (80011e8 <HAL_RCC_OscConfig+0x4c4>)
 8001044:	f023 0301 	bic.w	r3, r3, #1
 8001048:	6213      	str	r3, [r2, #32]
 800104a:	4b67      	ldr	r3, [pc, #412]	; (80011e8 <HAL_RCC_OscConfig+0x4c4>)
 800104c:	6a1b      	ldr	r3, [r3, #32]
 800104e:	4a66      	ldr	r2, [pc, #408]	; (80011e8 <HAL_RCC_OscConfig+0x4c4>)
 8001050:	f023 0304 	bic.w	r3, r3, #4
 8001054:	6213      	str	r3, [r2, #32]
 8001056:	e01c      	b.n	8001092 <HAL_RCC_OscConfig+0x36e>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	2b05      	cmp	r3, #5
 800105e:	d10c      	bne.n	800107a <HAL_RCC_OscConfig+0x356>
 8001060:	4b61      	ldr	r3, [pc, #388]	; (80011e8 <HAL_RCC_OscConfig+0x4c4>)
 8001062:	6a1b      	ldr	r3, [r3, #32]
 8001064:	4a60      	ldr	r2, [pc, #384]	; (80011e8 <HAL_RCC_OscConfig+0x4c4>)
 8001066:	f043 0304 	orr.w	r3, r3, #4
 800106a:	6213      	str	r3, [r2, #32]
 800106c:	4b5e      	ldr	r3, [pc, #376]	; (80011e8 <HAL_RCC_OscConfig+0x4c4>)
 800106e:	6a1b      	ldr	r3, [r3, #32]
 8001070:	4a5d      	ldr	r2, [pc, #372]	; (80011e8 <HAL_RCC_OscConfig+0x4c4>)
 8001072:	f043 0301 	orr.w	r3, r3, #1
 8001076:	6213      	str	r3, [r2, #32]
 8001078:	e00b      	b.n	8001092 <HAL_RCC_OscConfig+0x36e>
 800107a:	4b5b      	ldr	r3, [pc, #364]	; (80011e8 <HAL_RCC_OscConfig+0x4c4>)
 800107c:	6a1b      	ldr	r3, [r3, #32]
 800107e:	4a5a      	ldr	r2, [pc, #360]	; (80011e8 <HAL_RCC_OscConfig+0x4c4>)
 8001080:	f023 0301 	bic.w	r3, r3, #1
 8001084:	6213      	str	r3, [r2, #32]
 8001086:	4b58      	ldr	r3, [pc, #352]	; (80011e8 <HAL_RCC_OscConfig+0x4c4>)
 8001088:	6a1b      	ldr	r3, [r3, #32]
 800108a:	4a57      	ldr	r2, [pc, #348]	; (80011e8 <HAL_RCC_OscConfig+0x4c4>)
 800108c:	f023 0304 	bic.w	r3, r3, #4
 8001090:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d015      	beq.n	80010c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800109a:	f7ff fb6b 	bl	8000774 <HAL_GetTick>
 800109e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010a0:	e00a      	b.n	80010b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010a2:	f7ff fb67 	bl	8000774 <HAL_GetTick>
 80010a6:	4602      	mov	r2, r0
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d901      	bls.n	80010b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010b4:	2303      	movs	r3, #3
 80010b6:	e0b1      	b.n	800121c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010b8:	4b4b      	ldr	r3, [pc, #300]	; (80011e8 <HAL_RCC_OscConfig+0x4c4>)
 80010ba:	6a1b      	ldr	r3, [r3, #32]
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d0ee      	beq.n	80010a2 <HAL_RCC_OscConfig+0x37e>
 80010c4:	e014      	b.n	80010f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010c6:	f7ff fb55 	bl	8000774 <HAL_GetTick>
 80010ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010cc:	e00a      	b.n	80010e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010ce:	f7ff fb51 	bl	8000774 <HAL_GetTick>
 80010d2:	4602      	mov	r2, r0
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80010dc:	4293      	cmp	r3, r2
 80010de:	d901      	bls.n	80010e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80010e0:	2303      	movs	r3, #3
 80010e2:	e09b      	b.n	800121c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010e4:	4b40      	ldr	r3, [pc, #256]	; (80011e8 <HAL_RCC_OscConfig+0x4c4>)
 80010e6:	6a1b      	ldr	r3, [r3, #32]
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d1ee      	bne.n	80010ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010f0:	7dfb      	ldrb	r3, [r7, #23]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d105      	bne.n	8001102 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010f6:	4b3c      	ldr	r3, [pc, #240]	; (80011e8 <HAL_RCC_OscConfig+0x4c4>)
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	4a3b      	ldr	r2, [pc, #236]	; (80011e8 <HAL_RCC_OscConfig+0x4c4>)
 80010fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001100:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	2b00      	cmp	r3, #0
 8001108:	f000 8087 	beq.w	800121a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800110c:	4b36      	ldr	r3, [pc, #216]	; (80011e8 <HAL_RCC_OscConfig+0x4c4>)
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f003 030c 	and.w	r3, r3, #12
 8001114:	2b08      	cmp	r3, #8
 8001116:	d061      	beq.n	80011dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	69db      	ldr	r3, [r3, #28]
 800111c:	2b02      	cmp	r3, #2
 800111e:	d146      	bne.n	80011ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001120:	4b33      	ldr	r3, [pc, #204]	; (80011f0 <HAL_RCC_OscConfig+0x4cc>)
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001126:	f7ff fb25 	bl	8000774 <HAL_GetTick>
 800112a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800112c:	e008      	b.n	8001140 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800112e:	f7ff fb21 	bl	8000774 <HAL_GetTick>
 8001132:	4602      	mov	r2, r0
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d901      	bls.n	8001140 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e06d      	b.n	800121c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001140:	4b29      	ldr	r3, [pc, #164]	; (80011e8 <HAL_RCC_OscConfig+0x4c4>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1f0      	bne.n	800112e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6a1b      	ldr	r3, [r3, #32]
 8001150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001154:	d108      	bne.n	8001168 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001156:	4b24      	ldr	r3, [pc, #144]	; (80011e8 <HAL_RCC_OscConfig+0x4c4>)
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	4921      	ldr	r1, [pc, #132]	; (80011e8 <HAL_RCC_OscConfig+0x4c4>)
 8001164:	4313      	orrs	r3, r2
 8001166:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001168:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <HAL_RCC_OscConfig+0x4c4>)
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6a19      	ldr	r1, [r3, #32]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001178:	430b      	orrs	r3, r1
 800117a:	491b      	ldr	r1, [pc, #108]	; (80011e8 <HAL_RCC_OscConfig+0x4c4>)
 800117c:	4313      	orrs	r3, r2
 800117e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001180:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <HAL_RCC_OscConfig+0x4cc>)
 8001182:	2201      	movs	r2, #1
 8001184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001186:	f7ff faf5 	bl	8000774 <HAL_GetTick>
 800118a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800118c:	e008      	b.n	80011a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800118e:	f7ff faf1 	bl	8000774 <HAL_GetTick>
 8001192:	4602      	mov	r2, r0
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	2b02      	cmp	r3, #2
 800119a:	d901      	bls.n	80011a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800119c:	2303      	movs	r3, #3
 800119e:	e03d      	b.n	800121c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011a0:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <HAL_RCC_OscConfig+0x4c4>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d0f0      	beq.n	800118e <HAL_RCC_OscConfig+0x46a>
 80011ac:	e035      	b.n	800121a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011ae:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <HAL_RCC_OscConfig+0x4cc>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b4:	f7ff fade 	bl	8000774 <HAL_GetTick>
 80011b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011ba:	e008      	b.n	80011ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011bc:	f7ff fada 	bl	8000774 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e026      	b.n	800121c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_RCC_OscConfig+0x4c4>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d1f0      	bne.n	80011bc <HAL_RCC_OscConfig+0x498>
 80011da:	e01e      	b.n	800121a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	69db      	ldr	r3, [r3, #28]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d107      	bne.n	80011f4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e019      	b.n	800121c <HAL_RCC_OscConfig+0x4f8>
 80011e8:	40021000 	.word	0x40021000
 80011ec:	40007000 	.word	0x40007000
 80011f0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011f4:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <HAL_RCC_OscConfig+0x500>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6a1b      	ldr	r3, [r3, #32]
 8001204:	429a      	cmp	r2, r3
 8001206:	d106      	bne.n	8001216 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001212:	429a      	cmp	r2, r3
 8001214:	d001      	beq.n	800121a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e000      	b.n	800121c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800121a:	2300      	movs	r3, #0
}
 800121c:	4618      	mov	r0, r3
 800121e:	3718      	adds	r7, #24
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40021000 	.word	0x40021000

08001228 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d101      	bne.n	800123c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	e0d0      	b.n	80013de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800123c:	4b6a      	ldr	r3, [pc, #424]	; (80013e8 <HAL_RCC_ClockConfig+0x1c0>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0307 	and.w	r3, r3, #7
 8001244:	683a      	ldr	r2, [r7, #0]
 8001246:	429a      	cmp	r2, r3
 8001248:	d910      	bls.n	800126c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800124a:	4b67      	ldr	r3, [pc, #412]	; (80013e8 <HAL_RCC_ClockConfig+0x1c0>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f023 0207 	bic.w	r2, r3, #7
 8001252:	4965      	ldr	r1, [pc, #404]	; (80013e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	4313      	orrs	r3, r2
 8001258:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800125a:	4b63      	ldr	r3, [pc, #396]	; (80013e8 <HAL_RCC_ClockConfig+0x1c0>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	683a      	ldr	r2, [r7, #0]
 8001264:	429a      	cmp	r2, r3
 8001266:	d001      	beq.n	800126c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e0b8      	b.n	80013de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0302 	and.w	r3, r3, #2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d020      	beq.n	80012ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0304 	and.w	r3, r3, #4
 8001280:	2b00      	cmp	r3, #0
 8001282:	d005      	beq.n	8001290 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001284:	4b59      	ldr	r3, [pc, #356]	; (80013ec <HAL_RCC_ClockConfig+0x1c4>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	4a58      	ldr	r2, [pc, #352]	; (80013ec <HAL_RCC_ClockConfig+0x1c4>)
 800128a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800128e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0308 	and.w	r3, r3, #8
 8001298:	2b00      	cmp	r3, #0
 800129a:	d005      	beq.n	80012a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800129c:	4b53      	ldr	r3, [pc, #332]	; (80013ec <HAL_RCC_ClockConfig+0x1c4>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	4a52      	ldr	r2, [pc, #328]	; (80013ec <HAL_RCC_ClockConfig+0x1c4>)
 80012a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80012a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012a8:	4b50      	ldr	r3, [pc, #320]	; (80013ec <HAL_RCC_ClockConfig+0x1c4>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	494d      	ldr	r1, [pc, #308]	; (80013ec <HAL_RCC_ClockConfig+0x1c4>)
 80012b6:	4313      	orrs	r3, r2
 80012b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d040      	beq.n	8001348 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d107      	bne.n	80012de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ce:	4b47      	ldr	r3, [pc, #284]	; (80013ec <HAL_RCC_ClockConfig+0x1c4>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d115      	bne.n	8001306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e07f      	b.n	80013de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d107      	bne.n	80012f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012e6:	4b41      	ldr	r3, [pc, #260]	; (80013ec <HAL_RCC_ClockConfig+0x1c4>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d109      	bne.n	8001306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e073      	b.n	80013de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012f6:	4b3d      	ldr	r3, [pc, #244]	; (80013ec <HAL_RCC_ClockConfig+0x1c4>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d101      	bne.n	8001306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e06b      	b.n	80013de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001306:	4b39      	ldr	r3, [pc, #228]	; (80013ec <HAL_RCC_ClockConfig+0x1c4>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f023 0203 	bic.w	r2, r3, #3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	4936      	ldr	r1, [pc, #216]	; (80013ec <HAL_RCC_ClockConfig+0x1c4>)
 8001314:	4313      	orrs	r3, r2
 8001316:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001318:	f7ff fa2c 	bl	8000774 <HAL_GetTick>
 800131c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800131e:	e00a      	b.n	8001336 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001320:	f7ff fa28 	bl	8000774 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	f241 3288 	movw	r2, #5000	; 0x1388
 800132e:	4293      	cmp	r3, r2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e053      	b.n	80013de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001336:	4b2d      	ldr	r3, [pc, #180]	; (80013ec <HAL_RCC_ClockConfig+0x1c4>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f003 020c 	and.w	r2, r3, #12
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	429a      	cmp	r2, r3
 8001346:	d1eb      	bne.n	8001320 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001348:	4b27      	ldr	r3, [pc, #156]	; (80013e8 <HAL_RCC_ClockConfig+0x1c0>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0307 	and.w	r3, r3, #7
 8001350:	683a      	ldr	r2, [r7, #0]
 8001352:	429a      	cmp	r2, r3
 8001354:	d210      	bcs.n	8001378 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001356:	4b24      	ldr	r3, [pc, #144]	; (80013e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f023 0207 	bic.w	r2, r3, #7
 800135e:	4922      	ldr	r1, [pc, #136]	; (80013e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	4313      	orrs	r3, r2
 8001364:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001366:	4b20      	ldr	r3, [pc, #128]	; (80013e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	683a      	ldr	r2, [r7, #0]
 8001370:	429a      	cmp	r2, r3
 8001372:	d001      	beq.n	8001378 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e032      	b.n	80013de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0304 	and.w	r3, r3, #4
 8001380:	2b00      	cmp	r3, #0
 8001382:	d008      	beq.n	8001396 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001384:	4b19      	ldr	r3, [pc, #100]	; (80013ec <HAL_RCC_ClockConfig+0x1c4>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	4916      	ldr	r1, [pc, #88]	; (80013ec <HAL_RCC_ClockConfig+0x1c4>)
 8001392:	4313      	orrs	r3, r2
 8001394:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0308 	and.w	r3, r3, #8
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d009      	beq.n	80013b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013a2:	4b12      	ldr	r3, [pc, #72]	; (80013ec <HAL_RCC_ClockConfig+0x1c4>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	691b      	ldr	r3, [r3, #16]
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	490e      	ldr	r1, [pc, #56]	; (80013ec <HAL_RCC_ClockConfig+0x1c4>)
 80013b2:	4313      	orrs	r3, r2
 80013b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013b6:	f000 f821 	bl	80013fc <HAL_RCC_GetSysClockFreq>
 80013ba:	4602      	mov	r2, r0
 80013bc:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <HAL_RCC_ClockConfig+0x1c4>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	091b      	lsrs	r3, r3, #4
 80013c2:	f003 030f 	and.w	r3, r3, #15
 80013c6:	490a      	ldr	r1, [pc, #40]	; (80013f0 <HAL_RCC_ClockConfig+0x1c8>)
 80013c8:	5ccb      	ldrb	r3, [r1, r3]
 80013ca:	fa22 f303 	lsr.w	r3, r2, r3
 80013ce:	4a09      	ldr	r2, [pc, #36]	; (80013f4 <HAL_RCC_ClockConfig+0x1cc>)
 80013d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <HAL_RCC_ClockConfig+0x1d0>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff f98a 	bl	80006f0 <HAL_InitTick>

  return HAL_OK;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40022000 	.word	0x40022000
 80013ec:	40021000 	.word	0x40021000
 80013f0:	080032b0 	.word	0x080032b0
 80013f4:	20000000 	.word	0x20000000
 80013f8:	20000004 	.word	0x20000004

080013fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013fc:	b490      	push	{r4, r7}
 80013fe:	b08a      	sub	sp, #40	; 0x28
 8001400:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001402:	4b29      	ldr	r3, [pc, #164]	; (80014a8 <HAL_RCC_GetSysClockFreq+0xac>)
 8001404:	1d3c      	adds	r4, r7, #4
 8001406:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001408:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800140c:	f240 2301 	movw	r3, #513	; 0x201
 8001410:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001412:	2300      	movs	r3, #0
 8001414:	61fb      	str	r3, [r7, #28]
 8001416:	2300      	movs	r3, #0
 8001418:	61bb      	str	r3, [r7, #24]
 800141a:	2300      	movs	r3, #0
 800141c:	627b      	str	r3, [r7, #36]	; 0x24
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001422:	2300      	movs	r3, #0
 8001424:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001426:	4b21      	ldr	r3, [pc, #132]	; (80014ac <HAL_RCC_GetSysClockFreq+0xb0>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	f003 030c 	and.w	r3, r3, #12
 8001432:	2b04      	cmp	r3, #4
 8001434:	d002      	beq.n	800143c <HAL_RCC_GetSysClockFreq+0x40>
 8001436:	2b08      	cmp	r3, #8
 8001438:	d003      	beq.n	8001442 <HAL_RCC_GetSysClockFreq+0x46>
 800143a:	e02b      	b.n	8001494 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800143c:	4b1c      	ldr	r3, [pc, #112]	; (80014b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800143e:	623b      	str	r3, [r7, #32]
      break;
 8001440:	e02b      	b.n	800149a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	0c9b      	lsrs	r3, r3, #18
 8001446:	f003 030f 	and.w	r3, r3, #15
 800144a:	3328      	adds	r3, #40	; 0x28
 800144c:	443b      	add	r3, r7
 800144e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001452:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d012      	beq.n	8001484 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800145e:	4b13      	ldr	r3, [pc, #76]	; (80014ac <HAL_RCC_GetSysClockFreq+0xb0>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	0c5b      	lsrs	r3, r3, #17
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	3328      	adds	r3, #40	; 0x28
 800146a:	443b      	add	r3, r7
 800146c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001470:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	4a0e      	ldr	r2, [pc, #56]	; (80014b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001476:	fb03 f202 	mul.w	r2, r3, r2
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
 8001482:	e004      	b.n	800148e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	4a0b      	ldr	r2, [pc, #44]	; (80014b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001488:	fb02 f303 	mul.w	r3, r2, r3
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001490:	623b      	str	r3, [r7, #32]
      break;
 8001492:	e002      	b.n	800149a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001494:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001496:	623b      	str	r3, [r7, #32]
      break;
 8001498:	bf00      	nop
    }
  }
  return sysclockfreq;
 800149a:	6a3b      	ldr	r3, [r7, #32]
}
 800149c:	4618      	mov	r0, r3
 800149e:	3728      	adds	r7, #40	; 0x28
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc90      	pop	{r4, r7}
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	08002fb8 	.word	0x08002fb8
 80014ac:	40021000 	.word	0x40021000
 80014b0:	007a1200 	.word	0x007a1200
 80014b4:	003d0900 	.word	0x003d0900

080014b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014bc:	4b02      	ldr	r3, [pc, #8]	; (80014c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80014be:	681b      	ldr	r3, [r3, #0]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr
 80014c8:	20000000 	.word	0x20000000

080014cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014d0:	f7ff fff2 	bl	80014b8 <HAL_RCC_GetHCLKFreq>
 80014d4:	4602      	mov	r2, r0
 80014d6:	4b05      	ldr	r3, [pc, #20]	; (80014ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	0a1b      	lsrs	r3, r3, #8
 80014dc:	f003 0307 	and.w	r3, r3, #7
 80014e0:	4903      	ldr	r1, [pc, #12]	; (80014f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014e2:	5ccb      	ldrb	r3, [r1, r3]
 80014e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40021000 	.word	0x40021000
 80014f0:	080032c0 	.word	0x080032c0

080014f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014f8:	f7ff ffde 	bl	80014b8 <HAL_RCC_GetHCLKFreq>
 80014fc:	4602      	mov	r2, r0
 80014fe:	4b05      	ldr	r3, [pc, #20]	; (8001514 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	0adb      	lsrs	r3, r3, #11
 8001504:	f003 0307 	and.w	r3, r3, #7
 8001508:	4903      	ldr	r1, [pc, #12]	; (8001518 <HAL_RCC_GetPCLK2Freq+0x24>)
 800150a:	5ccb      	ldrb	r3, [r1, r3]
 800150c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001510:	4618      	mov	r0, r3
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40021000 	.word	0x40021000
 8001518:	080032c0 	.word	0x080032c0

0800151c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001524:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <RCC_Delay+0x34>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a0a      	ldr	r2, [pc, #40]	; (8001554 <RCC_Delay+0x38>)
 800152a:	fba2 2303 	umull	r2, r3, r2, r3
 800152e:	0a5b      	lsrs	r3, r3, #9
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	fb02 f303 	mul.w	r3, r2, r3
 8001536:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001538:	bf00      	nop
  }
  while (Delay --);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	1e5a      	subs	r2, r3, #1
 800153e:	60fa      	str	r2, [r7, #12]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d1f9      	bne.n	8001538 <RCC_Delay+0x1c>
}
 8001544:	bf00      	nop
 8001546:	bf00      	nop
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr
 8001550:	20000000 	.word	0x20000000
 8001554:	10624dd3 	.word	0x10624dd3

08001558 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e03f      	b.n	80015ea <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b00      	cmp	r3, #0
 8001574:	d106      	bne.n	8001584 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7fe ff36 	bl	80003f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2224      	movs	r2, #36	; 0x24
 8001588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	68da      	ldr	r2, [r3, #12]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800159a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f000 f9fb 	bl	8001998 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	691a      	ldr	r2, [r3, #16]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80015b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	695a      	ldr	r2, [r3, #20]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80015c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	68da      	ldr	r2, [r3, #12]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80015d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2220      	movs	r2, #32
 80015dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2220      	movs	r2, #32
 80015e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d101      	bne.n	8001604 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e047      	b.n	8001694 <HAL_HalfDuplex_Init+0xa2>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800160a:	b2db      	uxtb	r3, r3
 800160c:	2b00      	cmp	r3, #0
 800160e:	d106      	bne.n	800161e <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7fe fee9 	bl	80003f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2224      	movs	r2, #36	; 0x24
 8001622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	68da      	ldr	r2, [r3, #12]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001634:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f000 f9ae 	bl	8001998 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	691a      	ldr	r2, [r3, #16]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800164a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	695a      	ldr	r2, [r3, #20]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800165a:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	695a      	ldr	r2, [r3, #20]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f042 0208 	orr.w	r2, r2, #8
 800166a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	68da      	ldr	r2, [r3, #12]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800167a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2220      	movs	r2, #32
 8001686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2220      	movs	r2, #32
 800168e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001692:	2300      	movs	r3, #0
}
 8001694:	4618      	mov	r0, r3
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08a      	sub	sp, #40	; 0x28
 80016a0:	af02      	add	r7, sp, #8
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	603b      	str	r3, [r7, #0]
 80016a8:	4613      	mov	r3, r2
 80016aa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	2b20      	cmp	r3, #32
 80016ba:	d17c      	bne.n	80017b6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d002      	beq.n	80016c8 <HAL_UART_Transmit+0x2c>
 80016c2:	88fb      	ldrh	r3, [r7, #6]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d101      	bne.n	80016cc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e075      	b.n	80017b8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d101      	bne.n	80016da <HAL_UART_Transmit+0x3e>
 80016d6:	2302      	movs	r3, #2
 80016d8:	e06e      	b.n	80017b8 <HAL_UART_Transmit+0x11c>
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2201      	movs	r2, #1
 80016de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2200      	movs	r2, #0
 80016e6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2221      	movs	r2, #33	; 0x21
 80016ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80016f0:	f7ff f840 	bl	8000774 <HAL_GetTick>
 80016f4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	88fa      	ldrh	r2, [r7, #6]
 80016fa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	88fa      	ldrh	r2, [r7, #6]
 8001700:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800170a:	d108      	bne.n	800171e <HAL_UART_Transmit+0x82>
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	691b      	ldr	r3, [r3, #16]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d104      	bne.n	800171e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001714:	2300      	movs	r3, #0
 8001716:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	61bb      	str	r3, [r7, #24]
 800171c:	e003      	b.n	8001726 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001722:	2300      	movs	r3, #0
 8001724:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800172e:	e02a      	b.n	8001786 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	2200      	movs	r2, #0
 8001738:	2180      	movs	r1, #128	; 0x80
 800173a:	68f8      	ldr	r0, [r7, #12]
 800173c:	f000 f8e2 	bl	8001904 <UART_WaitOnFlagUntilTimeout>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e036      	b.n	80017b8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d10b      	bne.n	8001768 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	881b      	ldrh	r3, [r3, #0]
 8001754:	461a      	mov	r2, r3
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800175e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	3302      	adds	r3, #2
 8001764:	61bb      	str	r3, [r7, #24]
 8001766:	e007      	b.n	8001778 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	781a      	ldrb	r2, [r3, #0]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	3301      	adds	r3, #1
 8001776:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800177c:	b29b      	uxth	r3, r3
 800177e:	3b01      	subs	r3, #1
 8001780:	b29a      	uxth	r2, r3
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800178a:	b29b      	uxth	r3, r3
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1cf      	bne.n	8001730 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	2200      	movs	r2, #0
 8001798:	2140      	movs	r1, #64	; 0x40
 800179a:	68f8      	ldr	r0, [r7, #12]
 800179c:	f000 f8b2 	bl	8001904 <UART_WaitOnFlagUntilTimeout>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e006      	b.n	80017b8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2220      	movs	r2, #32
 80017ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80017b2:	2300      	movs	r3, #0
 80017b4:	e000      	b.n	80017b8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80017b6:	2302      	movs	r3, #2
  }
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3720      	adds	r7, #32
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08a      	sub	sp, #40	; 0x28
 80017c4:	af02      	add	r7, sp, #8
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	603b      	str	r3, [r7, #0]
 80017cc:	4613      	mov	r3, r2
 80017ce:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b20      	cmp	r3, #32
 80017de:	f040 808c 	bne.w	80018fa <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d002      	beq.n	80017ee <HAL_UART_Receive+0x2e>
 80017e8:	88fb      	ldrh	r3, [r7, #6]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e084      	b.n	80018fc <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d101      	bne.n	8001800 <HAL_UART_Receive+0x40>
 80017fc:	2302      	movs	r3, #2
 80017fe:	e07d      	b.n	80018fc <HAL_UART_Receive+0x13c>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2201      	movs	r2, #1
 8001804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2200      	movs	r2, #0
 800180c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2222      	movs	r2, #34	; 0x22
 8001812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2200      	movs	r2, #0
 800181a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800181c:	f7fe ffaa 	bl	8000774 <HAL_GetTick>
 8001820:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	88fa      	ldrh	r2, [r7, #6]
 8001826:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	88fa      	ldrh	r2, [r7, #6]
 800182c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001836:	d108      	bne.n	800184a <HAL_UART_Receive+0x8a>
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d104      	bne.n	800184a <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8001840:	2300      	movs	r3, #0
 8001842:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	61bb      	str	r3, [r7, #24]
 8001848:	e003      	b.n	8001852 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800184e:	2300      	movs	r3, #0
 8001850:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800185a:	e043      	b.n	80018e4 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	9300      	str	r3, [sp, #0]
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	2200      	movs	r2, #0
 8001864:	2120      	movs	r1, #32
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f000 f84c 	bl	8001904 <UART_WaitOnFlagUntilTimeout>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e042      	b.n	80018fc <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d10c      	bne.n	8001896 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	b29b      	uxth	r3, r3
 8001884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001888:	b29a      	uxth	r2, r3
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	3302      	adds	r3, #2
 8001892:	61bb      	str	r3, [r7, #24]
 8001894:	e01f      	b.n	80018d6 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800189e:	d007      	beq.n	80018b0 <HAL_UART_Receive+0xf0>
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d10a      	bne.n	80018be <HAL_UART_Receive+0xfe>
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d106      	bne.n	80018be <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	701a      	strb	r2, [r3, #0]
 80018bc:	e008      	b.n	80018d0 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	3301      	adds	r3, #1
 80018d4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80018da:	b29b      	uxth	r3, r3
 80018dc:	3b01      	subs	r3, #1
 80018de:	b29a      	uxth	r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1b6      	bne.n	800185c <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2220      	movs	r2, #32
 80018f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80018f6:	2300      	movs	r3, #0
 80018f8:	e000      	b.n	80018fc <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80018fa:	2302      	movs	r3, #2
  }
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3720      	adds	r7, #32
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	603b      	str	r3, [r7, #0]
 8001910:	4613      	mov	r3, r2
 8001912:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001914:	e02c      	b.n	8001970 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800191c:	d028      	beq.n	8001970 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d007      	beq.n	8001934 <UART_WaitOnFlagUntilTimeout+0x30>
 8001924:	f7fe ff26 	bl	8000774 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	429a      	cmp	r2, r3
 8001932:	d21d      	bcs.n	8001970 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	68da      	ldr	r2, [r3, #12]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001942:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	695a      	ldr	r2, [r3, #20]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 0201 	bic.w	r2, r2, #1
 8001952:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2220      	movs	r2, #32
 8001958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2220      	movs	r2, #32
 8001960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e00f      	b.n	8001990 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	4013      	ands	r3, r2
 800197a:	68ba      	ldr	r2, [r7, #8]
 800197c:	429a      	cmp	r2, r3
 800197e:	bf0c      	ite	eq
 8001980:	2301      	moveq	r3, #1
 8001982:	2300      	movne	r3, #0
 8001984:	b2db      	uxtb	r3, r3
 8001986:	461a      	mov	r2, r3
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	429a      	cmp	r2, r3
 800198c:	d0c3      	beq.n	8001916 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800198e:	2300      	movs	r3, #0
}
 8001990:	4618      	mov	r0, r3
 8001992:	3710      	adds	r7, #16
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68da      	ldr	r2, [r3, #12]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	430a      	orrs	r2, r1
 80019b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689a      	ldr	r2, [r3, #8]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	431a      	orrs	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	695b      	ldr	r3, [r3, #20]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80019d2:	f023 030c 	bic.w	r3, r3, #12
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	6812      	ldr	r2, [r2, #0]
 80019da:	68b9      	ldr	r1, [r7, #8]
 80019dc:	430b      	orrs	r3, r1
 80019de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	699a      	ldr	r2, [r3, #24]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	430a      	orrs	r2, r1
 80019f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a2c      	ldr	r2, [pc, #176]	; (8001aac <UART_SetConfig+0x114>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d103      	bne.n	8001a08 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001a00:	f7ff fd78 	bl	80014f4 <HAL_RCC_GetPCLK2Freq>
 8001a04:	60f8      	str	r0, [r7, #12]
 8001a06:	e002      	b.n	8001a0e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001a08:	f7ff fd60 	bl	80014cc <HAL_RCC_GetPCLK1Freq>
 8001a0c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	4613      	mov	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	009a      	lsls	r2, r3, #2
 8001a18:	441a      	add	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a24:	4a22      	ldr	r2, [pc, #136]	; (8001ab0 <UART_SetConfig+0x118>)
 8001a26:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2a:	095b      	lsrs	r3, r3, #5
 8001a2c:	0119      	lsls	r1, r3, #4
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	4613      	mov	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	009a      	lsls	r2, r3, #2
 8001a38:	441a      	add	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a44:	4b1a      	ldr	r3, [pc, #104]	; (8001ab0 <UART_SetConfig+0x118>)
 8001a46:	fba3 0302 	umull	r0, r3, r3, r2
 8001a4a:	095b      	lsrs	r3, r3, #5
 8001a4c:	2064      	movs	r0, #100	; 0x64
 8001a4e:	fb00 f303 	mul.w	r3, r0, r3
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	011b      	lsls	r3, r3, #4
 8001a56:	3332      	adds	r3, #50	; 0x32
 8001a58:	4a15      	ldr	r2, [pc, #84]	; (8001ab0 <UART_SetConfig+0x118>)
 8001a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5e:	095b      	lsrs	r3, r3, #5
 8001a60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a64:	4419      	add	r1, r3
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	009a      	lsls	r2, r3, #2
 8001a70:	441a      	add	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <UART_SetConfig+0x118>)
 8001a7e:	fba3 0302 	umull	r0, r3, r3, r2
 8001a82:	095b      	lsrs	r3, r3, #5
 8001a84:	2064      	movs	r0, #100	; 0x64
 8001a86:	fb00 f303 	mul.w	r3, r0, r3
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	011b      	lsls	r3, r3, #4
 8001a8e:	3332      	adds	r3, #50	; 0x32
 8001a90:	4a07      	ldr	r2, [pc, #28]	; (8001ab0 <UART_SetConfig+0x118>)
 8001a92:	fba2 2303 	umull	r2, r3, r2, r3
 8001a96:	095b      	lsrs	r3, r3, #5
 8001a98:	f003 020f 	and.w	r2, r3, #15
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	440a      	add	r2, r1
 8001aa2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001aa4:	bf00      	nop
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40013800 	.word	0x40013800
 8001ab0:	51eb851f 	.word	0x51eb851f

08001ab4 <console>:
#define SEND_TIME_OUT 10000

extern UART_HandleTypeDef huart1;
extern CRC_HandleTypeDef hcrc;

void console(const char *title, const char *msg) {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
	printf("%s:: %s\n", title, msg);
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	6879      	ldr	r1, [r7, #4]
 8001ac2:	4803      	ldr	r0, [pc, #12]	; (8001ad0 <console+0x1c>)
 8001ac4:	f000 fac2 	bl	800204c <iprintf>
}
 8001ac8:	bf00      	nop
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	08002fc8 	.word	0x08002fc8

08001ad4 <receive>:

static volatile uint8_t canTransmitted = 1;
void receive(uint32_t id, uint8_t *bytes, uint16_t len) {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	80fb      	strh	r3, [r7, #6]
	printf("0x%x : (%d)\n", (int) id, len);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	88fa      	ldrh	r2, [r7, #6]
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	481e      	ldr	r0, [pc, #120]	; (8001b64 <receive+0x90>)
 8001aea:	f000 faaf 	bl	800204c <iprintf>
	//	can_com_addMessage_tx(LINK_ID, id, bytes, len, 1);
	uint32_t prev_tick = HAL_GetTick();
 8001aee:	f7fe fe41 	bl	8000774 <HAL_GetTick>
 8001af2:	61f8      	str	r0, [r7, #28]
	int count = 0;
 8001af4:	2300      	movs	r3, #0
 8001af6:	61bb      	str	r3, [r7, #24]
	uint16_t new_size = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	82fb      	strh	r3, [r7, #22]
	while (1) {
		if (HAL_GetTick() - prev_tick > SEND_TIME_OUT)
 8001afc:	f7fe fe3a 	bl	8000774 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d822      	bhi.n	8001b54 <receive+0x80>
			break;
		new_size = (len - count);
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	88fa      	ldrh	r2, [r7, #6]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	82fb      	strh	r3, [r7, #22]
		if (new_size > 8)
 8001b18:	8afb      	ldrh	r3, [r7, #22]
 8001b1a:	2b08      	cmp	r3, #8
 8001b1c:	d901      	bls.n	8001b22 <receive+0x4e>
			new_size = 8;
 8001b1e:	2308      	movs	r3, #8
 8001b20:	82fb      	strh	r3, [r7, #22]
		if (new_size <= 0)
 8001b22:	8afb      	ldrh	r3, [r7, #22]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d017      	beq.n	8001b58 <receive+0x84>
			break;
		if(!canTransmitted)
 8001b28:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <receive+0x94>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d00e      	beq.n	8001b50 <receive+0x7c>
			continue;
		printf("%d\n",count);
 8001b32:	69b9      	ldr	r1, [r7, #24]
 8001b34:	480d      	ldr	r0, [pc, #52]	; (8001b6c <receive+0x98>)
 8001b36:	f000 fa89 	bl	800204c <iprintf>
//		if (canSend(id, bytes + count, new_size)) {
			prev_tick = HAL_GetTick();
 8001b3a:	f7fe fe1b 	bl	8000774 <HAL_GetTick>
 8001b3e:	61f8      	str	r0, [r7, #28]
			count += new_size;
 8001b40:	8afb      	ldrh	r3, [r7, #22]
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4413      	add	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
			canTransmitted = 0;
 8001b48:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <receive+0x94>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	701a      	strb	r2, [r3, #0]
 8001b4e:	e7d5      	b.n	8001afc <receive+0x28>
			continue;
 8001b50:	bf00      	nop
		if (HAL_GetTick() - prev_tick > SEND_TIME_OUT)
 8001b52:	e7d3      	b.n	8001afc <receive+0x28>
			break;
 8001b54:	bf00      	nop
 8001b56:	e000      	b.n	8001b5a <receive+0x86>
			break;
 8001b58:	bf00      	nop
//		}
	}
}
 8001b5a:	bf00      	nop
 8001b5c:	3720      	adds	r7, #32
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	08002fd4 	.word	0x08002fd4
 8001b68:	20000009 	.word	0x20000009
 8001b6c:	08002fe4 	.word	0x08002fe4

08001b70 <init>:
uint8_t data2[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, [99] = 12 };
/*
 * This function is called at the beginning of our code
 * @param adapter_huart		: handler of UART used for receiving and transmitting data
 */
void init() {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
	uart_init(&huart1, &hcrc, receive);
 8001b74:	4a05      	ldr	r2, [pc, #20]	; (8001b8c <init+0x1c>)
 8001b76:	4906      	ldr	r1, [pc, #24]	; (8001b90 <init+0x20>)
 8001b78:	4806      	ldr	r0, [pc, #24]	; (8001b94 <init+0x24>)
 8001b7a:	f000 fa0d 	bl	8001f98 <uart_init>
	console("INIT FROM ADAPTER", "SUCCESS");
 8001b7e:	4906      	ldr	r1, [pc, #24]	; (8001b98 <init+0x28>)
 8001b80:	4806      	ldr	r0, [pc, #24]	; (8001b9c <init+0x2c>)
 8001b82:	f7ff ff97 	bl	8001ab4 <console>
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	08001ad5 	.word	0x08001ad5
 8001b90:	2000008c 	.word	0x2000008c
 8001b94:	20000094 	.word	0x20000094
 8001b98:	08002fe8 	.word	0x08002fe8
 8001b9c:	08002ff0 	.word	0x08002ff0

08001ba0 <loop>:

/**
 * This function is called repeatedly
 */
void loop() {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
	uart_loop();
 8001ba4:	f000 fa1a 	bl	8001fdc <uart_loop>
}
 8001ba8:	bf00      	nop
 8001baa:	bd80      	pop	{r7, pc}

08001bac <console>:
static uint8_t send_data[TRANSMIT_BUFF_SIZE];
static uint8_t send_sync_bytes[1];
static uint8_t send_sync_ack[1];

static void console(ConsoleStatus status, const char *func_name,
		const char *msg, ...) {
 8001bac:	b40c      	push	{r2, r3}
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b084      	sub	sp, #16
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	6039      	str	r1, [r7, #0]
 8001bb8:	71fb      	strb	r3, [r7, #7]
	//	if(state!=CONSOLE_ERROR)
	//		return;
	//TODO make naked and show all registers
	if (status == CONSOLE_ERROR) {
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d104      	bne.n	8001bca <console+0x1e>
		printf("uart.c|%s> ERROR :", func_name);
 8001bc0:	6839      	ldr	r1, [r7, #0]
 8001bc2:	4813      	ldr	r0, [pc, #76]	; (8001c10 <console+0x64>)
 8001bc4:	f000 fa42 	bl	800204c <iprintf>
 8001bc8:	e013      	b.n	8001bf2 <console+0x46>
	} else if (status == CONSOLE_INFO) {
 8001bca:	79fb      	ldrb	r3, [r7, #7]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d104      	bne.n	8001bda <console+0x2e>
		printf("uart.c|%s> INFO : ", func_name);
 8001bd0:	6839      	ldr	r1, [r7, #0]
 8001bd2:	4810      	ldr	r0, [pc, #64]	; (8001c14 <console+0x68>)
 8001bd4:	f000 fa3a 	bl	800204c <iprintf>
 8001bd8:	e00b      	b.n	8001bf2 <console+0x46>
	} else if (status == CONSOLE_WARNING) {
 8001bda:	79fb      	ldrb	r3, [r7, #7]
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d104      	bne.n	8001bea <console+0x3e>
		printf("uart.c|%s> WARNING : ", func_name);
 8001be0:	6839      	ldr	r1, [r7, #0]
 8001be2:	480d      	ldr	r0, [pc, #52]	; (8001c18 <console+0x6c>)
 8001be4:	f000 fa32 	bl	800204c <iprintf>
 8001be8:	e003      	b.n	8001bf2 <console+0x46>
	} else {
		printf("uart.c|%s: ", func_name);
 8001bea:	6839      	ldr	r1, [r7, #0]
 8001bec:	480b      	ldr	r0, [pc, #44]	; (8001c1c <console+0x70>)
 8001bee:	f000 fa2d 	bl	800204c <iprintf>
	}
	va_list args;
	va_start(args, msg);
 8001bf2:	f107 031c 	add.w	r3, r7, #28
 8001bf6:	60fb      	str	r3, [r7, #12]
	vprintf(msg, args);
 8001bf8:	68f9      	ldr	r1, [r7, #12]
 8001bfa:	69b8      	ldr	r0, [r7, #24]
 8001bfc:	f000 fa3e 	bl	800207c <viprintf>
	va_end(args);
}
 8001c00:	bf00      	nop
 8001c02:	3710      	adds	r7, #16
 8001c04:	46bd      	mov	sp, r7
 8001c06:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c0a:	b002      	add	sp, #8
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	08003004 	.word	0x08003004
 8001c14:	08003018 	.word	0x08003018
 8001c18:	0800302c 	.word	0x0800302c
 8001c1c:	08003044 	.word	0x08003044

08001c20 <receiveThread>:


/**
 * This is receive thread called each time there is a receive available
 */
static void receiveThread() {
 8001c20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c24:	b08d      	sub	sp, #52	; 0x34
 8001c26:	af02      	add	r7, sp, #8
 8001c28:	466b      	mov	r3, sp
 8001c2a:	461e      	mov	r6, r3
	/* Start */
	uint8_t start_byte;
	if (HAL_UART_Receive(huart_adapter, (uint8_t*) &start_byte, 1,
 8001c2c:	4bb2      	ldr	r3, [pc, #712]	; (8001ef8 <receiveThread+0x2d8>)
 8001c2e:	6818      	ldr	r0, [r3, #0]
 8001c30:	f107 0113 	add.w	r1, r7, #19
 8001c34:	f04f 33ff 	mov.w	r3, #4294967295
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f7ff fdc1 	bl	80017c0 <HAL_UART_Receive>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f040 8198 	bne.w	8001f76 <receiveThread+0x356>
			HAL_MAX_DELAY) != HAL_OK)
		return;
	if (start_byte != 'S')
 8001c46:	7cfb      	ldrb	r3, [r7, #19]
 8001c48:	2b53      	cmp	r3, #83	; 0x53
 8001c4a:	f040 8196 	bne.w	8001f7a <receiveThread+0x35a>
		return;
	console(CONSOLE_INFO, __func__, "Start byte %c received\n",
 8001c4e:	7cfb      	ldrb	r3, [r7, #19]
 8001c50:	4aaa      	ldr	r2, [pc, #680]	; (8001efc <receiveThread+0x2dc>)
 8001c52:	49ab      	ldr	r1, [pc, #684]	; (8001f00 <receiveThread+0x2e0>)
 8001c54:	2001      	movs	r0, #1
 8001c56:	f7ff ffa9 	bl	8001bac <console>
			(char) start_byte);
	uint8_t start_ack = 'O';
 8001c5a:	234f      	movs	r3, #79	; 0x4f
 8001c5c:	74bb      	strb	r3, [r7, #18]
	if (HAL_UART_Transmit(huart_adapter, (uint8_t*) &start_ack, 1,
 8001c5e:	4ba6      	ldr	r3, [pc, #664]	; (8001ef8 <receiveThread+0x2d8>)
 8001c60:	6818      	ldr	r0, [r3, #0]
 8001c62:	f242 7310 	movw	r3, #10000	; 0x2710
 8001c66:	f107 0112 	add.w	r1, r7, #18
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f7ff fd16 	bl	800169c <HAL_UART_Transmit>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d00b      	beq.n	8001c8e <receiveThread+0x6e>
			RECEIVE_TIMEOUT) != HAL_OK) {
		console(CONSOLE_ERROR, __func__, "Start ack %c sending timeout %d ms\n",
 8001c76:	7cbb      	ldrb	r3, [r7, #18]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	f242 7310 	movw	r3, #10000	; 0x2710
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	4613      	mov	r3, r2
 8001c82:	4aa0      	ldr	r2, [pc, #640]	; (8001f04 <receiveThread+0x2e4>)
 8001c84:	499e      	ldr	r1, [pc, #632]	; (8001f00 <receiveThread+0x2e0>)
 8001c86:	2000      	movs	r0, #0
 8001c88:	f7ff ff90 	bl	8001bac <console>
				(char) start_ack, RECEIVE_TIMEOUT);
		return;
 8001c8c:	e176      	b.n	8001f7c <receiveThread+0x35c>
	}
	console(CONSOLE_INFO, __func__, "Start ack %c sent\n", (char) start_ack);
 8001c8e:	7cbb      	ldrb	r3, [r7, #18]
 8001c90:	4a9d      	ldr	r2, [pc, #628]	; (8001f08 <receiveThread+0x2e8>)
 8001c92:	499b      	ldr	r1, [pc, #620]	; (8001f00 <receiveThread+0x2e0>)
 8001c94:	2001      	movs	r0, #1
 8001c96:	f7ff ff89 	bl	8001bac <console>

	/* Can ID */
	uint32_t can_id;
	if (HAL_UART_Receive(huart_adapter, (uint8_t*) (&can_id), 4,
 8001c9a:	4b97      	ldr	r3, [pc, #604]	; (8001ef8 <receiveThread+0x2d8>)
 8001c9c:	6818      	ldr	r0, [r3, #0]
 8001c9e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001ca2:	f107 010c 	add.w	r1, r7, #12
 8001ca6:	2204      	movs	r2, #4
 8001ca8:	f7ff fd8a 	bl	80017c0 <HAL_UART_Receive>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d007      	beq.n	8001cc2 <receiveThread+0xa2>
			RECEIVE_TIMEOUT) != HAL_OK) {
		console(CONSOLE_ERROR, __func__, "Can ID received timeout %d ms\n",
 8001cb2:	f242 7310 	movw	r3, #10000	; 0x2710
 8001cb6:	4a95      	ldr	r2, [pc, #596]	; (8001f0c <receiveThread+0x2ec>)
 8001cb8:	4991      	ldr	r1, [pc, #580]	; (8001f00 <receiveThread+0x2e0>)
 8001cba:	2000      	movs	r0, #0
 8001cbc:	f7ff ff76 	bl	8001bac <console>
				RECEIVE_TIMEOUT);
		return;
 8001cc0:	e15c      	b.n	8001f7c <receiveThread+0x35c>
	}
	console(CONSOLE_INFO, __func__, "Can ID received :: 0x%x\n", can_id);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	4a92      	ldr	r2, [pc, #584]	; (8001f10 <receiveThread+0x2f0>)
 8001cc6:	498e      	ldr	r1, [pc, #568]	; (8001f00 <receiveThread+0x2e0>)
 8001cc8:	2001      	movs	r0, #1
 8001cca:	f7ff ff6f 	bl	8001bac <console>
	if (HAL_UART_Transmit(huart_adapter, (uint8_t*) (&can_id), 4,
 8001cce:	4b8a      	ldr	r3, [pc, #552]	; (8001ef8 <receiveThread+0x2d8>)
 8001cd0:	6818      	ldr	r0, [r3, #0]
 8001cd2:	f242 7310 	movw	r3, #10000	; 0x2710
 8001cd6:	f107 010c 	add.w	r1, r7, #12
 8001cda:	2204      	movs	r2, #4
 8001cdc:	f7ff fcde 	bl	800169c <HAL_UART_Transmit>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d009      	beq.n	8001cfa <receiveThread+0xda>
			RECEIVE_TIMEOUT) != HAL_OK) {
		console(CONSOLE_ERROR, __func__,
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f242 7210 	movw	r2, #10000	; 0x2710
 8001cec:	9200      	str	r2, [sp, #0]
 8001cee:	4a89      	ldr	r2, [pc, #548]	; (8001f14 <receiveThread+0x2f4>)
 8001cf0:	4983      	ldr	r1, [pc, #524]	; (8001f00 <receiveThread+0x2e0>)
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	f7ff ff5a 	bl	8001bac <console>
				"Can ID ack 0x%x sending timeout %d ms\n", can_id,
				RECEIVE_TIMEOUT);
		return;
 8001cf8:	e140      	b.n	8001f7c <receiveThread+0x35c>
	}
	console(CONSOLE_INFO, __func__, "CAN ID ack 0x%x sent\n", can_id);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	4a86      	ldr	r2, [pc, #536]	; (8001f18 <receiveThread+0x2f8>)
 8001cfe:	4980      	ldr	r1, [pc, #512]	; (8001f00 <receiveThread+0x2e0>)
 8001d00:	2001      	movs	r0, #1
 8001d02:	f7ff ff53 	bl	8001bac <console>

	/*  data length */
	uint16_t len;
	if (HAL_UART_Receive(huart_adapter, (uint8_t*) (&len), 2, RECEIVE_TIMEOUT)
 8001d06:	4b7c      	ldr	r3, [pc, #496]	; (8001ef8 <receiveThread+0x2d8>)
 8001d08:	6818      	ldr	r0, [r3, #0]
 8001d0a:	f242 7310 	movw	r3, #10000	; 0x2710
 8001d0e:	f107 010a 	add.w	r1, r7, #10
 8001d12:	2202      	movs	r2, #2
 8001d14:	f7ff fd54 	bl	80017c0 <HAL_UART_Receive>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d007      	beq.n	8001d2e <receiveThread+0x10e>
			!= HAL_OK) {
		console(CONSOLE_ERROR, __func__, "Length received timeout %d ms\n",
 8001d1e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001d22:	4a7e      	ldr	r2, [pc, #504]	; (8001f1c <receiveThread+0x2fc>)
 8001d24:	4976      	ldr	r1, [pc, #472]	; (8001f00 <receiveThread+0x2e0>)
 8001d26:	2000      	movs	r0, #0
 8001d28:	f7ff ff40 	bl	8001bac <console>
				RECEIVE_TIMEOUT);
		return;
 8001d2c:	e126      	b.n	8001f7c <receiveThread+0x35c>
	}
	len = 8;
 8001d2e:	2308      	movs	r3, #8
 8001d30:	817b      	strh	r3, [r7, #10]
	console(CONSOLE_INFO, __func__, "Length received :: %d\n", len);
 8001d32:	897b      	ldrh	r3, [r7, #10]
 8001d34:	4a7a      	ldr	r2, [pc, #488]	; (8001f20 <receiveThread+0x300>)
 8001d36:	4972      	ldr	r1, [pc, #456]	; (8001f00 <receiveThread+0x2e0>)
 8001d38:	2001      	movs	r0, #1
 8001d3a:	f7ff ff37 	bl	8001bac <console>
	uint8_t len_ack = 'O';
 8001d3e:	234f      	movs	r3, #79	; 0x4f
 8001d40:	727b      	strb	r3, [r7, #9]
	if (HAL_UART_Transmit(huart_adapter, (uint8_t*) &len_ack, 1,
 8001d42:	4b6d      	ldr	r3, [pc, #436]	; (8001ef8 <receiveThread+0x2d8>)
 8001d44:	6818      	ldr	r0, [r3, #0]
 8001d46:	f242 7310 	movw	r3, #10000	; 0x2710
 8001d4a:	f107 0109 	add.w	r1, r7, #9
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f7ff fca4 	bl	800169c <HAL_UART_Transmit>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00b      	beq.n	8001d72 <receiveThread+0x152>
			RECEIVE_TIMEOUT) != HAL_OK) {
		console(CONSOLE_ERROR, __func__,
 8001d5a:	7a7b      	ldrb	r3, [r7, #9]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	4613      	mov	r3, r2
 8001d66:	4a6f      	ldr	r2, [pc, #444]	; (8001f24 <receiveThread+0x304>)
 8001d68:	4965      	ldr	r1, [pc, #404]	; (8001f00 <receiveThread+0x2e0>)
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	f7ff ff1e 	bl	8001bac <console>
				"Length ack %c sending timeout %d ms\n", (char) len_ack,
				RECEIVE_TIMEOUT);
		return;
 8001d70:	e104      	b.n	8001f7c <receiveThread+0x35c>
	}
	console(CONSOLE_INFO, __func__, "Length ack %c sent\n", (char) len_ack);
 8001d72:	7a7b      	ldrb	r3, [r7, #9]
 8001d74:	4a6c      	ldr	r2, [pc, #432]	; (8001f28 <receiveThread+0x308>)
 8001d76:	4962      	ldr	r1, [pc, #392]	; (8001f00 <receiveThread+0x2e0>)
 8001d78:	2001      	movs	r0, #1
 8001d7a:	f7ff ff17 	bl	8001bac <console>

	/* Data */
	uint8_t data[len];
 8001d7e:	8979      	ldrh	r1, [r7, #10]
 8001d80:	460b      	mov	r3, r1
 8001d82:	3b01      	subs	r3, #1
 8001d84:	623b      	str	r3, [r7, #32]
 8001d86:	b28b      	uxth	r3, r1
 8001d88:	2200      	movs	r2, #0
 8001d8a:	4698      	mov	r8, r3
 8001d8c:	4691      	mov	r9, r2
 8001d8e:	f04f 0200 	mov.w	r2, #0
 8001d92:	f04f 0300 	mov.w	r3, #0
 8001d96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001da2:	b28b      	uxth	r3, r1
 8001da4:	2200      	movs	r2, #0
 8001da6:	461c      	mov	r4, r3
 8001da8:	4615      	mov	r5, r2
 8001daa:	f04f 0200 	mov.w	r2, #0
 8001dae:	f04f 0300 	mov.w	r3, #0
 8001db2:	00eb      	lsls	r3, r5, #3
 8001db4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001db8:	00e2      	lsls	r2, r4, #3
 8001dba:	460b      	mov	r3, r1
 8001dbc:	3307      	adds	r3, #7
 8001dbe:	08db      	lsrs	r3, r3, #3
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	ebad 0d03 	sub.w	sp, sp, r3
 8001dc6:	ab02      	add	r3, sp, #8
 8001dc8:	3300      	adds	r3, #0
 8001dca:	61fb      	str	r3, [r7, #28]
	if (HAL_UART_Receive(huart_adapter, data, len, RECEIVE_TIMEOUT) != HAL_OK) {
 8001dcc:	4b4a      	ldr	r3, [pc, #296]	; (8001ef8 <receiveThread+0x2d8>)
 8001dce:	6818      	ldr	r0, [r3, #0]
 8001dd0:	897a      	ldrh	r2, [r7, #10]
 8001dd2:	f242 7310 	movw	r3, #10000	; 0x2710
 8001dd6:	69f9      	ldr	r1, [r7, #28]
 8001dd8:	f7ff fcf2 	bl	80017c0 <HAL_UART_Receive>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d007      	beq.n	8001df2 <receiveThread+0x1d2>
		console(CONSOLE_ERROR, __func__, "Data receive timeout %d ms\n",
 8001de2:	f242 7310 	movw	r3, #10000	; 0x2710
 8001de6:	4a51      	ldr	r2, [pc, #324]	; (8001f2c <receiveThread+0x30c>)
 8001de8:	4945      	ldr	r1, [pc, #276]	; (8001f00 <receiveThread+0x2e0>)
 8001dea:	2000      	movs	r0, #0
 8001dec:	f7ff fede 	bl	8001bac <console>
				RECEIVE_TIMEOUT);
		return;
 8001df0:	e0c4      	b.n	8001f7c <receiveThread+0x35c>
	}
	console(CONSOLE_INFO, __func__, "Data received\n");
 8001df2:	4a4f      	ldr	r2, [pc, #316]	; (8001f30 <receiveThread+0x310>)
 8001df4:	4942      	ldr	r1, [pc, #264]	; (8001f00 <receiveThread+0x2e0>)
 8001df6:	2001      	movs	r0, #1
 8001df8:	f7ff fed8 	bl	8001bac <console>
	int loop_limit = len % 4;
 8001dfc:	897b      	ldrh	r3, [r7, #10]
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	61bb      	str	r3, [r7, #24]
	for (int i = 0; i < (4 - loop_limit) && loop_limit > 0; i++)
 8001e04:	2300      	movs	r3, #0
 8001e06:	627b      	str	r3, [r7, #36]	; 0x24
 8001e08:	e00a      	b.n	8001e20 <receiveThread+0x200>
		data[len++] = 0x00;
 8001e0a:	897b      	ldrh	r3, [r7, #10]
 8001e0c:	1c5a      	adds	r2, r3, #1
 8001e0e:	b292      	uxth	r2, r2
 8001e10:	817a      	strh	r2, [r7, #10]
 8001e12:	461a      	mov	r2, r3
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	2100      	movs	r1, #0
 8001e18:	5499      	strb	r1, [r3, r2]
	for (int i = 0; i < (4 - loop_limit) && loop_limit > 0; i++)
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	f1c3 0304 	rsb	r3, r3, #4
 8001e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	da02      	bge.n	8001e32 <receiveThread+0x212>
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	dceb      	bgt.n	8001e0a <receiveThread+0x1ea>

	uint32_t crc = HAL_CRC_Calculate(hcrc_adapter, (uint32_t*) data,
 8001e32:	4b40      	ldr	r3, [pc, #256]	; (8001f34 <receiveThread+0x314>)
 8001e34:	6818      	ldr	r0, [r3, #0]
 8001e36:	897b      	ldrh	r3, [r7, #10]
 8001e38:	089b      	lsrs	r3, r3, #2
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	69f9      	ldr	r1, [r7, #28]
 8001e40:	f7fe fda1 	bl	8000986 <HAL_CRC_Calculate>
 8001e44:	6178      	str	r0, [r7, #20]
			(uint32_t) (len / 4));
	if (HAL_UART_Transmit(huart_adapter, (uint8_t*) &len_ack, 1,
 8001e46:	4b2c      	ldr	r3, [pc, #176]	; (8001ef8 <receiveThread+0x2d8>)
 8001e48:	6818      	ldr	r0, [r3, #0]
 8001e4a:	f242 7310 	movw	r3, #10000	; 0x2710
 8001e4e:	f107 0109 	add.w	r1, r7, #9
 8001e52:	2201      	movs	r2, #1
 8001e54:	f7ff fc22 	bl	800169c <HAL_UART_Transmit>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d009      	beq.n	8001e72 <receiveThread+0x252>
			RECEIVE_TIMEOUT) != HAL_OK) {
		console(CONSOLE_ERROR, __func__, "CRC 0x%x sending timeout %d ms\n",
 8001e5e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	4a34      	ldr	r2, [pc, #208]	; (8001f38 <receiveThread+0x318>)
 8001e68:	4925      	ldr	r1, [pc, #148]	; (8001f00 <receiveThread+0x2e0>)
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	f7ff fe9e 	bl	8001bac <console>
				crc, RECEIVE_TIMEOUT);
		return;
 8001e70:	e084      	b.n	8001f7c <receiveThread+0x35c>
	}
	console(CONSOLE_INFO, __func__, "CRC 0x%x sent\n", crc);
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	4a31      	ldr	r2, [pc, #196]	; (8001f3c <receiveThread+0x31c>)
 8001e76:	4922      	ldr	r1, [pc, #136]	; (8001f00 <receiveThread+0x2e0>)
 8001e78:	2001      	movs	r0, #1
 8001e7a:	f7ff fe97 	bl	8001bac <console>

	/* Endgame */
	uint8_t end_byte;
	if (HAL_UART_Receive(huart_adapter, (uint8_t*) &end_byte, 1, HAL_MAX_DELAY)
 8001e7e:	4b1e      	ldr	r3, [pc, #120]	; (8001ef8 <receiveThread+0x2d8>)
 8001e80:	6818      	ldr	r0, [r3, #0]
 8001e82:	f107 0108 	add.w	r1, r7, #8
 8001e86:	f04f 33ff 	mov.w	r3, #4294967295
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f7ff fc98 	bl	80017c0 <HAL_UART_Receive>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d007      	beq.n	8001ea6 <receiveThread+0x286>
			!= HAL_OK) {
		console(CONSOLE_ERROR, __func__, "End byte received timeout %d ms\n",
 8001e96:	f242 7310 	movw	r3, #10000	; 0x2710
 8001e9a:	4a29      	ldr	r2, [pc, #164]	; (8001f40 <receiveThread+0x320>)
 8001e9c:	4918      	ldr	r1, [pc, #96]	; (8001f00 <receiveThread+0x2e0>)
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	f7ff fe84 	bl	8001bac <console>
				RECEIVE_TIMEOUT);
		return;
 8001ea4:	e06a      	b.n	8001f7c <receiveThread+0x35c>
	}
	if (end_byte != '\0') {
 8001ea6:	7a3b      	ldrb	r3, [r7, #8]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d006      	beq.n	8001eba <receiveThread+0x29a>
		console(CONSOLE_ERROR, __func__, "End byte received incorrect : %d\n",
 8001eac:	7a3b      	ldrb	r3, [r7, #8]
 8001eae:	4a25      	ldr	r2, [pc, #148]	; (8001f44 <receiveThread+0x324>)
 8001eb0:	4913      	ldr	r1, [pc, #76]	; (8001f00 <receiveThread+0x2e0>)
 8001eb2:	2000      	movs	r0, #0
 8001eb4:	f7ff fe7a 	bl	8001bac <console>
				(char) end_byte);
		return;
 8001eb8:	e060      	b.n	8001f7c <receiveThread+0x35c>
	}
	console(CONSOLE_INFO, __func__, "End byte %c received\n", (char) end_byte);
 8001eba:	7a3b      	ldrb	r3, [r7, #8]
 8001ebc:	4a22      	ldr	r2, [pc, #136]	; (8001f48 <receiveThread+0x328>)
 8001ebe:	4910      	ldr	r1, [pc, #64]	; (8001f00 <receiveThread+0x2e0>)
 8001ec0:	2001      	movs	r0, #1
 8001ec2:	f7ff fe73 	bl	8001bac <console>
	uint8_t end_ack = 'O';
 8001ec6:	234f      	movs	r3, #79	; 0x4f
 8001ec8:	71fb      	strb	r3, [r7, #7]
	if (HAL_UART_Transmit(huart_adapter, (uint8_t*) &end_ack, 1,
 8001eca:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <receiveThread+0x2d8>)
 8001ecc:	6818      	ldr	r0, [r3, #0]
 8001ece:	f242 7310 	movw	r3, #10000	; 0x2710
 8001ed2:	1df9      	adds	r1, r7, #7
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f7ff fbe1 	bl	800169c <HAL_UART_Transmit>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d037      	beq.n	8001f50 <receiveThread+0x330>
			RECEIVE_TIMEOUT) != HAL_OK) {
		console(CONSOLE_ERROR, __func__, "End ack %c sending timeout %d ms\n",
 8001ee0:	79fb      	ldrb	r3, [r7, #7]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	f242 7310 	movw	r3, #10000	; 0x2710
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	4613      	mov	r3, r2
 8001eec:	4a17      	ldr	r2, [pc, #92]	; (8001f4c <receiveThread+0x32c>)
 8001eee:	4904      	ldr	r1, [pc, #16]	; (8001f00 <receiveThread+0x2e0>)
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	f7ff fe5b 	bl	8001bac <console>
				(char) end_ack, RECEIVE_TIMEOUT);
		return;
 8001ef6:	e041      	b.n	8001f7c <receiveThread+0x35c>
 8001ef8:	20000124 	.word	0x20000124
 8001efc:	08003050 	.word	0x08003050
 8001f00:	080032c8 	.word	0x080032c8
 8001f04:	08003068 	.word	0x08003068
 8001f08:	0800308c 	.word	0x0800308c
 8001f0c:	080030a0 	.word	0x080030a0
 8001f10:	080030c0 	.word	0x080030c0
 8001f14:	080030dc 	.word	0x080030dc
 8001f18:	08003104 	.word	0x08003104
 8001f1c:	0800311c 	.word	0x0800311c
 8001f20:	0800313c 	.word	0x0800313c
 8001f24:	08003154 	.word	0x08003154
 8001f28:	0800317c 	.word	0x0800317c
 8001f2c:	08003190 	.word	0x08003190
 8001f30:	080031ac 	.word	0x080031ac
 8001f34:	20000128 	.word	0x20000128
 8001f38:	080031bc 	.word	0x080031bc
 8001f3c:	080031dc 	.word	0x080031dc
 8001f40:	080031ec 	.word	0x080031ec
 8001f44:	08003210 	.word	0x08003210
 8001f48:	08003234 	.word	0x08003234
 8001f4c:	0800324c 	.word	0x0800324c
	}
	console(CONSOLE_INFO, __func__, "End ack %c sent\n", (char) end_ack);
 8001f50:	79fb      	ldrb	r3, [r7, #7]
 8001f52:	4a0d      	ldr	r2, [pc, #52]	; (8001f88 <receiveThread+0x368>)
 8001f54:	490d      	ldr	r1, [pc, #52]	; (8001f8c <receiveThread+0x36c>)
 8001f56:	2001      	movs	r0, #1
 8001f58:	f7ff fe28 	bl	8001bac <console>

	console(CONSOLE_INFO, __func__, "Data received success\n");
 8001f5c:	4a0c      	ldr	r2, [pc, #48]	; (8001f90 <receiveThread+0x370>)
 8001f5e:	490b      	ldr	r1, [pc, #44]	; (8001f8c <receiveThread+0x36c>)
 8001f60:	2001      	movs	r0, #1
 8001f62:	f7ff fe23 	bl	8001bac <console>
	receiveCallback(can_id, data, len);
 8001f66:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <receiveThread+0x374>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	897a      	ldrh	r2, [r7, #10]
 8001f6e:	69f9      	ldr	r1, [r7, #28]
 8001f70:	4798      	blx	r3
 8001f72:	46b5      	mov	sp, r6
 8001f74:	e003      	b.n	8001f7e <receiveThread+0x35e>
		return;
 8001f76:	bf00      	nop
 8001f78:	e000      	b.n	8001f7c <receiveThread+0x35c>
		return;
 8001f7a:	bf00      	nop
 8001f7c:	46b5      	mov	sp, r6
	//after this go to the next phase
}
 8001f7e:	372c      	adds	r7, #44	; 0x2c
 8001f80:	46bd      	mov	sp, r7
 8001f82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f86:	bf00      	nop
 8001f88:	08003270 	.word	0x08003270
 8001f8c:	080032c8 	.word	0x080032c8
 8001f90:	08003284 	.word	0x08003284
 8001f94:	2000012c 	.word	0x2000012c

08001f98 <uart_init>:
 * @param huart	: UART handler
 * @param hcrc	: CRC handler
 * @param huart	: receive callback function
 */
void uart_init(UART_HandleTypeDef *huart, CRC_HandleTypeDef *hcrc,
		void (*receiveCallbackFunc)(uint32_t, uint8_t*, uint16_t)) {
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
	huart_adapter = huart;
 8001fa4:	4a08      	ldr	r2, [pc, #32]	; (8001fc8 <uart_init+0x30>)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6013      	str	r3, [r2, #0]
	hcrc_adapter = hcrc;
 8001faa:	4a08      	ldr	r2, [pc, #32]	; (8001fcc <uart_init+0x34>)
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	6013      	str	r3, [r2, #0]
	receiveCallback = receiveCallbackFunc;
 8001fb0:	4a07      	ldr	r2, [pc, #28]	; (8001fd0 <uart_init+0x38>)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6013      	str	r3, [r2, #0]
	console(CONSOLE_INFO, __func__, "Initiate success\n");
 8001fb6:	4a07      	ldr	r2, [pc, #28]	; (8001fd4 <uart_init+0x3c>)
 8001fb8:	4907      	ldr	r1, [pc, #28]	; (8001fd8 <uart_init+0x40>)
 8001fba:	2001      	movs	r0, #1
 8001fbc:	f7ff fdf6 	bl	8001bac <console>
}
 8001fc0:	bf00      	nop
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	20000124 	.word	0x20000124
 8001fcc:	20000128 	.word	0x20000128
 8001fd0:	2000012c 	.word	0x2000012c
 8001fd4:	0800329c 	.word	0x0800329c
 8001fd8:	080032d8 	.word	0x080032d8

08001fdc <uart_loop>:

/**
 * This is uart loop
 *
 */
void uart_loop() {
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
	receiveThread();
 8001fe0:	f7ff fe1e 	bl	8001c20 <receiveThread>
}
 8001fe4:	bf00      	nop
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <__errno>:
 8001fe8:	4b01      	ldr	r3, [pc, #4]	; (8001ff0 <__errno+0x8>)
 8001fea:	6818      	ldr	r0, [r3, #0]
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	2000000c 	.word	0x2000000c

08001ff4 <__libc_init_array>:
 8001ff4:	b570      	push	{r4, r5, r6, lr}
 8001ff6:	2600      	movs	r6, #0
 8001ff8:	4d0c      	ldr	r5, [pc, #48]	; (800202c <__libc_init_array+0x38>)
 8001ffa:	4c0d      	ldr	r4, [pc, #52]	; (8002030 <__libc_init_array+0x3c>)
 8001ffc:	1b64      	subs	r4, r4, r5
 8001ffe:	10a4      	asrs	r4, r4, #2
 8002000:	42a6      	cmp	r6, r4
 8002002:	d109      	bne.n	8002018 <__libc_init_array+0x24>
 8002004:	f000 ffcc 	bl	8002fa0 <_init>
 8002008:	2600      	movs	r6, #0
 800200a:	4d0a      	ldr	r5, [pc, #40]	; (8002034 <__libc_init_array+0x40>)
 800200c:	4c0a      	ldr	r4, [pc, #40]	; (8002038 <__libc_init_array+0x44>)
 800200e:	1b64      	subs	r4, r4, r5
 8002010:	10a4      	asrs	r4, r4, #2
 8002012:	42a6      	cmp	r6, r4
 8002014:	d105      	bne.n	8002022 <__libc_init_array+0x2e>
 8002016:	bd70      	pop	{r4, r5, r6, pc}
 8002018:	f855 3b04 	ldr.w	r3, [r5], #4
 800201c:	4798      	blx	r3
 800201e:	3601      	adds	r6, #1
 8002020:	e7ee      	b.n	8002000 <__libc_init_array+0xc>
 8002022:	f855 3b04 	ldr.w	r3, [r5], #4
 8002026:	4798      	blx	r3
 8002028:	3601      	adds	r6, #1
 800202a:	e7f2      	b.n	8002012 <__libc_init_array+0x1e>
 800202c:	0800337c 	.word	0x0800337c
 8002030:	0800337c 	.word	0x0800337c
 8002034:	0800337c 	.word	0x0800337c
 8002038:	08003380 	.word	0x08003380

0800203c <memset>:
 800203c:	4603      	mov	r3, r0
 800203e:	4402      	add	r2, r0
 8002040:	4293      	cmp	r3, r2
 8002042:	d100      	bne.n	8002046 <memset+0xa>
 8002044:	4770      	bx	lr
 8002046:	f803 1b01 	strb.w	r1, [r3], #1
 800204a:	e7f9      	b.n	8002040 <memset+0x4>

0800204c <iprintf>:
 800204c:	b40f      	push	{r0, r1, r2, r3}
 800204e:	4b0a      	ldr	r3, [pc, #40]	; (8002078 <iprintf+0x2c>)
 8002050:	b513      	push	{r0, r1, r4, lr}
 8002052:	681c      	ldr	r4, [r3, #0]
 8002054:	b124      	cbz	r4, 8002060 <iprintf+0x14>
 8002056:	69a3      	ldr	r3, [r4, #24]
 8002058:	b913      	cbnz	r3, 8002060 <iprintf+0x14>
 800205a:	4620      	mov	r0, r4
 800205c:	f000 f87c 	bl	8002158 <__sinit>
 8002060:	ab05      	add	r3, sp, #20
 8002062:	4620      	mov	r0, r4
 8002064:	9a04      	ldr	r2, [sp, #16]
 8002066:	68a1      	ldr	r1, [r4, #8]
 8002068:	9301      	str	r3, [sp, #4]
 800206a:	f000 f9d1 	bl	8002410 <_vfiprintf_r>
 800206e:	b002      	add	sp, #8
 8002070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002074:	b004      	add	sp, #16
 8002076:	4770      	bx	lr
 8002078:	2000000c 	.word	0x2000000c

0800207c <viprintf>:
 800207c:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <viprintf+0x28>)
 800207e:	b570      	push	{r4, r5, r6, lr}
 8002080:	681c      	ldr	r4, [r3, #0]
 8002082:	4605      	mov	r5, r0
 8002084:	460e      	mov	r6, r1
 8002086:	b124      	cbz	r4, 8002092 <viprintf+0x16>
 8002088:	69a3      	ldr	r3, [r4, #24]
 800208a:	b913      	cbnz	r3, 8002092 <viprintf+0x16>
 800208c:	4620      	mov	r0, r4
 800208e:	f000 f863 	bl	8002158 <__sinit>
 8002092:	4633      	mov	r3, r6
 8002094:	462a      	mov	r2, r5
 8002096:	4620      	mov	r0, r4
 8002098:	68a1      	ldr	r1, [r4, #8]
 800209a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800209e:	f000 b9b7 	b.w	8002410 <_vfiprintf_r>
 80020a2:	bf00      	nop
 80020a4:	2000000c 	.word	0x2000000c

080020a8 <std>:
 80020a8:	2300      	movs	r3, #0
 80020aa:	b510      	push	{r4, lr}
 80020ac:	4604      	mov	r4, r0
 80020ae:	e9c0 3300 	strd	r3, r3, [r0]
 80020b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80020b6:	6083      	str	r3, [r0, #8]
 80020b8:	8181      	strh	r1, [r0, #12]
 80020ba:	6643      	str	r3, [r0, #100]	; 0x64
 80020bc:	81c2      	strh	r2, [r0, #14]
 80020be:	6183      	str	r3, [r0, #24]
 80020c0:	4619      	mov	r1, r3
 80020c2:	2208      	movs	r2, #8
 80020c4:	305c      	adds	r0, #92	; 0x5c
 80020c6:	f7ff ffb9 	bl	800203c <memset>
 80020ca:	4b05      	ldr	r3, [pc, #20]	; (80020e0 <std+0x38>)
 80020cc:	6224      	str	r4, [r4, #32]
 80020ce:	6263      	str	r3, [r4, #36]	; 0x24
 80020d0:	4b04      	ldr	r3, [pc, #16]	; (80020e4 <std+0x3c>)
 80020d2:	62a3      	str	r3, [r4, #40]	; 0x28
 80020d4:	4b04      	ldr	r3, [pc, #16]	; (80020e8 <std+0x40>)
 80020d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80020d8:	4b04      	ldr	r3, [pc, #16]	; (80020ec <std+0x44>)
 80020da:	6323      	str	r3, [r4, #48]	; 0x30
 80020dc:	bd10      	pop	{r4, pc}
 80020de:	bf00      	nop
 80020e0:	080029bd 	.word	0x080029bd
 80020e4:	080029df 	.word	0x080029df
 80020e8:	08002a17 	.word	0x08002a17
 80020ec:	08002a3b 	.word	0x08002a3b

080020f0 <_cleanup_r>:
 80020f0:	4901      	ldr	r1, [pc, #4]	; (80020f8 <_cleanup_r+0x8>)
 80020f2:	f000 b8af 	b.w	8002254 <_fwalk_reent>
 80020f6:	bf00      	nop
 80020f8:	08002d0d 	.word	0x08002d0d

080020fc <__sfmoreglue>:
 80020fc:	2268      	movs	r2, #104	; 0x68
 80020fe:	b570      	push	{r4, r5, r6, lr}
 8002100:	1e4d      	subs	r5, r1, #1
 8002102:	4355      	muls	r5, r2
 8002104:	460e      	mov	r6, r1
 8002106:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800210a:	f000 f8e5 	bl	80022d8 <_malloc_r>
 800210e:	4604      	mov	r4, r0
 8002110:	b140      	cbz	r0, 8002124 <__sfmoreglue+0x28>
 8002112:	2100      	movs	r1, #0
 8002114:	e9c0 1600 	strd	r1, r6, [r0]
 8002118:	300c      	adds	r0, #12
 800211a:	60a0      	str	r0, [r4, #8]
 800211c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002120:	f7ff ff8c 	bl	800203c <memset>
 8002124:	4620      	mov	r0, r4
 8002126:	bd70      	pop	{r4, r5, r6, pc}

08002128 <__sfp_lock_acquire>:
 8002128:	4801      	ldr	r0, [pc, #4]	; (8002130 <__sfp_lock_acquire+0x8>)
 800212a:	f000 b8b3 	b.w	8002294 <__retarget_lock_acquire_recursive>
 800212e:	bf00      	nop
 8002130:	20000131 	.word	0x20000131

08002134 <__sfp_lock_release>:
 8002134:	4801      	ldr	r0, [pc, #4]	; (800213c <__sfp_lock_release+0x8>)
 8002136:	f000 b8ae 	b.w	8002296 <__retarget_lock_release_recursive>
 800213a:	bf00      	nop
 800213c:	20000131 	.word	0x20000131

08002140 <__sinit_lock_acquire>:
 8002140:	4801      	ldr	r0, [pc, #4]	; (8002148 <__sinit_lock_acquire+0x8>)
 8002142:	f000 b8a7 	b.w	8002294 <__retarget_lock_acquire_recursive>
 8002146:	bf00      	nop
 8002148:	20000132 	.word	0x20000132

0800214c <__sinit_lock_release>:
 800214c:	4801      	ldr	r0, [pc, #4]	; (8002154 <__sinit_lock_release+0x8>)
 800214e:	f000 b8a2 	b.w	8002296 <__retarget_lock_release_recursive>
 8002152:	bf00      	nop
 8002154:	20000132 	.word	0x20000132

08002158 <__sinit>:
 8002158:	b510      	push	{r4, lr}
 800215a:	4604      	mov	r4, r0
 800215c:	f7ff fff0 	bl	8002140 <__sinit_lock_acquire>
 8002160:	69a3      	ldr	r3, [r4, #24]
 8002162:	b11b      	cbz	r3, 800216c <__sinit+0x14>
 8002164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002168:	f7ff bff0 	b.w	800214c <__sinit_lock_release>
 800216c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002170:	6523      	str	r3, [r4, #80]	; 0x50
 8002172:	4b13      	ldr	r3, [pc, #76]	; (80021c0 <__sinit+0x68>)
 8002174:	4a13      	ldr	r2, [pc, #76]	; (80021c4 <__sinit+0x6c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	62a2      	str	r2, [r4, #40]	; 0x28
 800217a:	42a3      	cmp	r3, r4
 800217c:	bf08      	it	eq
 800217e:	2301      	moveq	r3, #1
 8002180:	4620      	mov	r0, r4
 8002182:	bf08      	it	eq
 8002184:	61a3      	streq	r3, [r4, #24]
 8002186:	f000 f81f 	bl	80021c8 <__sfp>
 800218a:	6060      	str	r0, [r4, #4]
 800218c:	4620      	mov	r0, r4
 800218e:	f000 f81b 	bl	80021c8 <__sfp>
 8002192:	60a0      	str	r0, [r4, #8]
 8002194:	4620      	mov	r0, r4
 8002196:	f000 f817 	bl	80021c8 <__sfp>
 800219a:	2200      	movs	r2, #0
 800219c:	2104      	movs	r1, #4
 800219e:	60e0      	str	r0, [r4, #12]
 80021a0:	6860      	ldr	r0, [r4, #4]
 80021a2:	f7ff ff81 	bl	80020a8 <std>
 80021a6:	2201      	movs	r2, #1
 80021a8:	2109      	movs	r1, #9
 80021aa:	68a0      	ldr	r0, [r4, #8]
 80021ac:	f7ff ff7c 	bl	80020a8 <std>
 80021b0:	2202      	movs	r2, #2
 80021b2:	2112      	movs	r1, #18
 80021b4:	68e0      	ldr	r0, [r4, #12]
 80021b6:	f7ff ff77 	bl	80020a8 <std>
 80021ba:	2301      	movs	r3, #1
 80021bc:	61a3      	str	r3, [r4, #24]
 80021be:	e7d1      	b.n	8002164 <__sinit+0xc>
 80021c0:	080032e4 	.word	0x080032e4
 80021c4:	080020f1 	.word	0x080020f1

080021c8 <__sfp>:
 80021c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ca:	4607      	mov	r7, r0
 80021cc:	f7ff ffac 	bl	8002128 <__sfp_lock_acquire>
 80021d0:	4b1e      	ldr	r3, [pc, #120]	; (800224c <__sfp+0x84>)
 80021d2:	681e      	ldr	r6, [r3, #0]
 80021d4:	69b3      	ldr	r3, [r6, #24]
 80021d6:	b913      	cbnz	r3, 80021de <__sfp+0x16>
 80021d8:	4630      	mov	r0, r6
 80021da:	f7ff ffbd 	bl	8002158 <__sinit>
 80021de:	3648      	adds	r6, #72	; 0x48
 80021e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80021e4:	3b01      	subs	r3, #1
 80021e6:	d503      	bpl.n	80021f0 <__sfp+0x28>
 80021e8:	6833      	ldr	r3, [r6, #0]
 80021ea:	b30b      	cbz	r3, 8002230 <__sfp+0x68>
 80021ec:	6836      	ldr	r6, [r6, #0]
 80021ee:	e7f7      	b.n	80021e0 <__sfp+0x18>
 80021f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80021f4:	b9d5      	cbnz	r5, 800222c <__sfp+0x64>
 80021f6:	4b16      	ldr	r3, [pc, #88]	; (8002250 <__sfp+0x88>)
 80021f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80021fc:	60e3      	str	r3, [r4, #12]
 80021fe:	6665      	str	r5, [r4, #100]	; 0x64
 8002200:	f000 f847 	bl	8002292 <__retarget_lock_init_recursive>
 8002204:	f7ff ff96 	bl	8002134 <__sfp_lock_release>
 8002208:	2208      	movs	r2, #8
 800220a:	4629      	mov	r1, r5
 800220c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002210:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002214:	6025      	str	r5, [r4, #0]
 8002216:	61a5      	str	r5, [r4, #24]
 8002218:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800221c:	f7ff ff0e 	bl	800203c <memset>
 8002220:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002224:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002228:	4620      	mov	r0, r4
 800222a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800222c:	3468      	adds	r4, #104	; 0x68
 800222e:	e7d9      	b.n	80021e4 <__sfp+0x1c>
 8002230:	2104      	movs	r1, #4
 8002232:	4638      	mov	r0, r7
 8002234:	f7ff ff62 	bl	80020fc <__sfmoreglue>
 8002238:	4604      	mov	r4, r0
 800223a:	6030      	str	r0, [r6, #0]
 800223c:	2800      	cmp	r0, #0
 800223e:	d1d5      	bne.n	80021ec <__sfp+0x24>
 8002240:	f7ff ff78 	bl	8002134 <__sfp_lock_release>
 8002244:	230c      	movs	r3, #12
 8002246:	603b      	str	r3, [r7, #0]
 8002248:	e7ee      	b.n	8002228 <__sfp+0x60>
 800224a:	bf00      	nop
 800224c:	080032e4 	.word	0x080032e4
 8002250:	ffff0001 	.word	0xffff0001

08002254 <_fwalk_reent>:
 8002254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002258:	4606      	mov	r6, r0
 800225a:	4688      	mov	r8, r1
 800225c:	2700      	movs	r7, #0
 800225e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002262:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002266:	f1b9 0901 	subs.w	r9, r9, #1
 800226a:	d505      	bpl.n	8002278 <_fwalk_reent+0x24>
 800226c:	6824      	ldr	r4, [r4, #0]
 800226e:	2c00      	cmp	r4, #0
 8002270:	d1f7      	bne.n	8002262 <_fwalk_reent+0xe>
 8002272:	4638      	mov	r0, r7
 8002274:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002278:	89ab      	ldrh	r3, [r5, #12]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d907      	bls.n	800228e <_fwalk_reent+0x3a>
 800227e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002282:	3301      	adds	r3, #1
 8002284:	d003      	beq.n	800228e <_fwalk_reent+0x3a>
 8002286:	4629      	mov	r1, r5
 8002288:	4630      	mov	r0, r6
 800228a:	47c0      	blx	r8
 800228c:	4307      	orrs	r7, r0
 800228e:	3568      	adds	r5, #104	; 0x68
 8002290:	e7e9      	b.n	8002266 <_fwalk_reent+0x12>

08002292 <__retarget_lock_init_recursive>:
 8002292:	4770      	bx	lr

08002294 <__retarget_lock_acquire_recursive>:
 8002294:	4770      	bx	lr

08002296 <__retarget_lock_release_recursive>:
 8002296:	4770      	bx	lr

08002298 <sbrk_aligned>:
 8002298:	b570      	push	{r4, r5, r6, lr}
 800229a:	4e0e      	ldr	r6, [pc, #56]	; (80022d4 <sbrk_aligned+0x3c>)
 800229c:	460c      	mov	r4, r1
 800229e:	6831      	ldr	r1, [r6, #0]
 80022a0:	4605      	mov	r5, r0
 80022a2:	b911      	cbnz	r1, 80022aa <sbrk_aligned+0x12>
 80022a4:	f000 fb7a 	bl	800299c <_sbrk_r>
 80022a8:	6030      	str	r0, [r6, #0]
 80022aa:	4621      	mov	r1, r4
 80022ac:	4628      	mov	r0, r5
 80022ae:	f000 fb75 	bl	800299c <_sbrk_r>
 80022b2:	1c43      	adds	r3, r0, #1
 80022b4:	d00a      	beq.n	80022cc <sbrk_aligned+0x34>
 80022b6:	1cc4      	adds	r4, r0, #3
 80022b8:	f024 0403 	bic.w	r4, r4, #3
 80022bc:	42a0      	cmp	r0, r4
 80022be:	d007      	beq.n	80022d0 <sbrk_aligned+0x38>
 80022c0:	1a21      	subs	r1, r4, r0
 80022c2:	4628      	mov	r0, r5
 80022c4:	f000 fb6a 	bl	800299c <_sbrk_r>
 80022c8:	3001      	adds	r0, #1
 80022ca:	d101      	bne.n	80022d0 <sbrk_aligned+0x38>
 80022cc:	f04f 34ff 	mov.w	r4, #4294967295
 80022d0:	4620      	mov	r0, r4
 80022d2:	bd70      	pop	{r4, r5, r6, pc}
 80022d4:	20000138 	.word	0x20000138

080022d8 <_malloc_r>:
 80022d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022dc:	1ccd      	adds	r5, r1, #3
 80022de:	f025 0503 	bic.w	r5, r5, #3
 80022e2:	3508      	adds	r5, #8
 80022e4:	2d0c      	cmp	r5, #12
 80022e6:	bf38      	it	cc
 80022e8:	250c      	movcc	r5, #12
 80022ea:	2d00      	cmp	r5, #0
 80022ec:	4607      	mov	r7, r0
 80022ee:	db01      	blt.n	80022f4 <_malloc_r+0x1c>
 80022f0:	42a9      	cmp	r1, r5
 80022f2:	d905      	bls.n	8002300 <_malloc_r+0x28>
 80022f4:	230c      	movs	r3, #12
 80022f6:	2600      	movs	r6, #0
 80022f8:	603b      	str	r3, [r7, #0]
 80022fa:	4630      	mov	r0, r6
 80022fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002300:	4e2e      	ldr	r6, [pc, #184]	; (80023bc <_malloc_r+0xe4>)
 8002302:	f000 fdc5 	bl	8002e90 <__malloc_lock>
 8002306:	6833      	ldr	r3, [r6, #0]
 8002308:	461c      	mov	r4, r3
 800230a:	bb34      	cbnz	r4, 800235a <_malloc_r+0x82>
 800230c:	4629      	mov	r1, r5
 800230e:	4638      	mov	r0, r7
 8002310:	f7ff ffc2 	bl	8002298 <sbrk_aligned>
 8002314:	1c43      	adds	r3, r0, #1
 8002316:	4604      	mov	r4, r0
 8002318:	d14d      	bne.n	80023b6 <_malloc_r+0xde>
 800231a:	6834      	ldr	r4, [r6, #0]
 800231c:	4626      	mov	r6, r4
 800231e:	2e00      	cmp	r6, #0
 8002320:	d140      	bne.n	80023a4 <_malloc_r+0xcc>
 8002322:	6823      	ldr	r3, [r4, #0]
 8002324:	4631      	mov	r1, r6
 8002326:	4638      	mov	r0, r7
 8002328:	eb04 0803 	add.w	r8, r4, r3
 800232c:	f000 fb36 	bl	800299c <_sbrk_r>
 8002330:	4580      	cmp	r8, r0
 8002332:	d13a      	bne.n	80023aa <_malloc_r+0xd2>
 8002334:	6821      	ldr	r1, [r4, #0]
 8002336:	3503      	adds	r5, #3
 8002338:	1a6d      	subs	r5, r5, r1
 800233a:	f025 0503 	bic.w	r5, r5, #3
 800233e:	3508      	adds	r5, #8
 8002340:	2d0c      	cmp	r5, #12
 8002342:	bf38      	it	cc
 8002344:	250c      	movcc	r5, #12
 8002346:	4638      	mov	r0, r7
 8002348:	4629      	mov	r1, r5
 800234a:	f7ff ffa5 	bl	8002298 <sbrk_aligned>
 800234e:	3001      	adds	r0, #1
 8002350:	d02b      	beq.n	80023aa <_malloc_r+0xd2>
 8002352:	6823      	ldr	r3, [r4, #0]
 8002354:	442b      	add	r3, r5
 8002356:	6023      	str	r3, [r4, #0]
 8002358:	e00e      	b.n	8002378 <_malloc_r+0xa0>
 800235a:	6822      	ldr	r2, [r4, #0]
 800235c:	1b52      	subs	r2, r2, r5
 800235e:	d41e      	bmi.n	800239e <_malloc_r+0xc6>
 8002360:	2a0b      	cmp	r2, #11
 8002362:	d916      	bls.n	8002392 <_malloc_r+0xba>
 8002364:	1961      	adds	r1, r4, r5
 8002366:	42a3      	cmp	r3, r4
 8002368:	6025      	str	r5, [r4, #0]
 800236a:	bf18      	it	ne
 800236c:	6059      	strne	r1, [r3, #4]
 800236e:	6863      	ldr	r3, [r4, #4]
 8002370:	bf08      	it	eq
 8002372:	6031      	streq	r1, [r6, #0]
 8002374:	5162      	str	r2, [r4, r5]
 8002376:	604b      	str	r3, [r1, #4]
 8002378:	4638      	mov	r0, r7
 800237a:	f104 060b 	add.w	r6, r4, #11
 800237e:	f000 fd8d 	bl	8002e9c <__malloc_unlock>
 8002382:	f026 0607 	bic.w	r6, r6, #7
 8002386:	1d23      	adds	r3, r4, #4
 8002388:	1af2      	subs	r2, r6, r3
 800238a:	d0b6      	beq.n	80022fa <_malloc_r+0x22>
 800238c:	1b9b      	subs	r3, r3, r6
 800238e:	50a3      	str	r3, [r4, r2]
 8002390:	e7b3      	b.n	80022fa <_malloc_r+0x22>
 8002392:	6862      	ldr	r2, [r4, #4]
 8002394:	42a3      	cmp	r3, r4
 8002396:	bf0c      	ite	eq
 8002398:	6032      	streq	r2, [r6, #0]
 800239a:	605a      	strne	r2, [r3, #4]
 800239c:	e7ec      	b.n	8002378 <_malloc_r+0xa0>
 800239e:	4623      	mov	r3, r4
 80023a0:	6864      	ldr	r4, [r4, #4]
 80023a2:	e7b2      	b.n	800230a <_malloc_r+0x32>
 80023a4:	4634      	mov	r4, r6
 80023a6:	6876      	ldr	r6, [r6, #4]
 80023a8:	e7b9      	b.n	800231e <_malloc_r+0x46>
 80023aa:	230c      	movs	r3, #12
 80023ac:	4638      	mov	r0, r7
 80023ae:	603b      	str	r3, [r7, #0]
 80023b0:	f000 fd74 	bl	8002e9c <__malloc_unlock>
 80023b4:	e7a1      	b.n	80022fa <_malloc_r+0x22>
 80023b6:	6025      	str	r5, [r4, #0]
 80023b8:	e7de      	b.n	8002378 <_malloc_r+0xa0>
 80023ba:	bf00      	nop
 80023bc:	20000134 	.word	0x20000134

080023c0 <__sfputc_r>:
 80023c0:	6893      	ldr	r3, [r2, #8]
 80023c2:	b410      	push	{r4}
 80023c4:	3b01      	subs	r3, #1
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	6093      	str	r3, [r2, #8]
 80023ca:	da07      	bge.n	80023dc <__sfputc_r+0x1c>
 80023cc:	6994      	ldr	r4, [r2, #24]
 80023ce:	42a3      	cmp	r3, r4
 80023d0:	db01      	blt.n	80023d6 <__sfputc_r+0x16>
 80023d2:	290a      	cmp	r1, #10
 80023d4:	d102      	bne.n	80023dc <__sfputc_r+0x1c>
 80023d6:	bc10      	pop	{r4}
 80023d8:	f000 bb34 	b.w	8002a44 <__swbuf_r>
 80023dc:	6813      	ldr	r3, [r2, #0]
 80023de:	1c58      	adds	r0, r3, #1
 80023e0:	6010      	str	r0, [r2, #0]
 80023e2:	7019      	strb	r1, [r3, #0]
 80023e4:	4608      	mov	r0, r1
 80023e6:	bc10      	pop	{r4}
 80023e8:	4770      	bx	lr

080023ea <__sfputs_r>:
 80023ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ec:	4606      	mov	r6, r0
 80023ee:	460f      	mov	r7, r1
 80023f0:	4614      	mov	r4, r2
 80023f2:	18d5      	adds	r5, r2, r3
 80023f4:	42ac      	cmp	r4, r5
 80023f6:	d101      	bne.n	80023fc <__sfputs_r+0x12>
 80023f8:	2000      	movs	r0, #0
 80023fa:	e007      	b.n	800240c <__sfputs_r+0x22>
 80023fc:	463a      	mov	r2, r7
 80023fe:	4630      	mov	r0, r6
 8002400:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002404:	f7ff ffdc 	bl	80023c0 <__sfputc_r>
 8002408:	1c43      	adds	r3, r0, #1
 800240a:	d1f3      	bne.n	80023f4 <__sfputs_r+0xa>
 800240c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002410 <_vfiprintf_r>:
 8002410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002414:	460d      	mov	r5, r1
 8002416:	4614      	mov	r4, r2
 8002418:	4698      	mov	r8, r3
 800241a:	4606      	mov	r6, r0
 800241c:	b09d      	sub	sp, #116	; 0x74
 800241e:	b118      	cbz	r0, 8002428 <_vfiprintf_r+0x18>
 8002420:	6983      	ldr	r3, [r0, #24]
 8002422:	b90b      	cbnz	r3, 8002428 <_vfiprintf_r+0x18>
 8002424:	f7ff fe98 	bl	8002158 <__sinit>
 8002428:	4b89      	ldr	r3, [pc, #548]	; (8002650 <_vfiprintf_r+0x240>)
 800242a:	429d      	cmp	r5, r3
 800242c:	d11b      	bne.n	8002466 <_vfiprintf_r+0x56>
 800242e:	6875      	ldr	r5, [r6, #4]
 8002430:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002432:	07d9      	lsls	r1, r3, #31
 8002434:	d405      	bmi.n	8002442 <_vfiprintf_r+0x32>
 8002436:	89ab      	ldrh	r3, [r5, #12]
 8002438:	059a      	lsls	r2, r3, #22
 800243a:	d402      	bmi.n	8002442 <_vfiprintf_r+0x32>
 800243c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800243e:	f7ff ff29 	bl	8002294 <__retarget_lock_acquire_recursive>
 8002442:	89ab      	ldrh	r3, [r5, #12]
 8002444:	071b      	lsls	r3, r3, #28
 8002446:	d501      	bpl.n	800244c <_vfiprintf_r+0x3c>
 8002448:	692b      	ldr	r3, [r5, #16]
 800244a:	b9eb      	cbnz	r3, 8002488 <_vfiprintf_r+0x78>
 800244c:	4629      	mov	r1, r5
 800244e:	4630      	mov	r0, r6
 8002450:	f000 fb5c 	bl	8002b0c <__swsetup_r>
 8002454:	b1c0      	cbz	r0, 8002488 <_vfiprintf_r+0x78>
 8002456:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002458:	07dc      	lsls	r4, r3, #31
 800245a:	d50e      	bpl.n	800247a <_vfiprintf_r+0x6a>
 800245c:	f04f 30ff 	mov.w	r0, #4294967295
 8002460:	b01d      	add	sp, #116	; 0x74
 8002462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002466:	4b7b      	ldr	r3, [pc, #492]	; (8002654 <_vfiprintf_r+0x244>)
 8002468:	429d      	cmp	r5, r3
 800246a:	d101      	bne.n	8002470 <_vfiprintf_r+0x60>
 800246c:	68b5      	ldr	r5, [r6, #8]
 800246e:	e7df      	b.n	8002430 <_vfiprintf_r+0x20>
 8002470:	4b79      	ldr	r3, [pc, #484]	; (8002658 <_vfiprintf_r+0x248>)
 8002472:	429d      	cmp	r5, r3
 8002474:	bf08      	it	eq
 8002476:	68f5      	ldreq	r5, [r6, #12]
 8002478:	e7da      	b.n	8002430 <_vfiprintf_r+0x20>
 800247a:	89ab      	ldrh	r3, [r5, #12]
 800247c:	0598      	lsls	r0, r3, #22
 800247e:	d4ed      	bmi.n	800245c <_vfiprintf_r+0x4c>
 8002480:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002482:	f7ff ff08 	bl	8002296 <__retarget_lock_release_recursive>
 8002486:	e7e9      	b.n	800245c <_vfiprintf_r+0x4c>
 8002488:	2300      	movs	r3, #0
 800248a:	9309      	str	r3, [sp, #36]	; 0x24
 800248c:	2320      	movs	r3, #32
 800248e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002492:	2330      	movs	r3, #48	; 0x30
 8002494:	f04f 0901 	mov.w	r9, #1
 8002498:	f8cd 800c 	str.w	r8, [sp, #12]
 800249c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800265c <_vfiprintf_r+0x24c>
 80024a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80024a4:	4623      	mov	r3, r4
 80024a6:	469a      	mov	sl, r3
 80024a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80024ac:	b10a      	cbz	r2, 80024b2 <_vfiprintf_r+0xa2>
 80024ae:	2a25      	cmp	r2, #37	; 0x25
 80024b0:	d1f9      	bne.n	80024a6 <_vfiprintf_r+0x96>
 80024b2:	ebba 0b04 	subs.w	fp, sl, r4
 80024b6:	d00b      	beq.n	80024d0 <_vfiprintf_r+0xc0>
 80024b8:	465b      	mov	r3, fp
 80024ba:	4622      	mov	r2, r4
 80024bc:	4629      	mov	r1, r5
 80024be:	4630      	mov	r0, r6
 80024c0:	f7ff ff93 	bl	80023ea <__sfputs_r>
 80024c4:	3001      	adds	r0, #1
 80024c6:	f000 80aa 	beq.w	800261e <_vfiprintf_r+0x20e>
 80024ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80024cc:	445a      	add	r2, fp
 80024ce:	9209      	str	r2, [sp, #36]	; 0x24
 80024d0:	f89a 3000 	ldrb.w	r3, [sl]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f000 80a2 	beq.w	800261e <_vfiprintf_r+0x20e>
 80024da:	2300      	movs	r3, #0
 80024dc:	f04f 32ff 	mov.w	r2, #4294967295
 80024e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80024e4:	f10a 0a01 	add.w	sl, sl, #1
 80024e8:	9304      	str	r3, [sp, #16]
 80024ea:	9307      	str	r3, [sp, #28]
 80024ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80024f0:	931a      	str	r3, [sp, #104]	; 0x68
 80024f2:	4654      	mov	r4, sl
 80024f4:	2205      	movs	r2, #5
 80024f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80024fa:	4858      	ldr	r0, [pc, #352]	; (800265c <_vfiprintf_r+0x24c>)
 80024fc:	f000 fcba 	bl	8002e74 <memchr>
 8002500:	9a04      	ldr	r2, [sp, #16]
 8002502:	b9d8      	cbnz	r0, 800253c <_vfiprintf_r+0x12c>
 8002504:	06d1      	lsls	r1, r2, #27
 8002506:	bf44      	itt	mi
 8002508:	2320      	movmi	r3, #32
 800250a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800250e:	0713      	lsls	r3, r2, #28
 8002510:	bf44      	itt	mi
 8002512:	232b      	movmi	r3, #43	; 0x2b
 8002514:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002518:	f89a 3000 	ldrb.w	r3, [sl]
 800251c:	2b2a      	cmp	r3, #42	; 0x2a
 800251e:	d015      	beq.n	800254c <_vfiprintf_r+0x13c>
 8002520:	4654      	mov	r4, sl
 8002522:	2000      	movs	r0, #0
 8002524:	f04f 0c0a 	mov.w	ip, #10
 8002528:	9a07      	ldr	r2, [sp, #28]
 800252a:	4621      	mov	r1, r4
 800252c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002530:	3b30      	subs	r3, #48	; 0x30
 8002532:	2b09      	cmp	r3, #9
 8002534:	d94e      	bls.n	80025d4 <_vfiprintf_r+0x1c4>
 8002536:	b1b0      	cbz	r0, 8002566 <_vfiprintf_r+0x156>
 8002538:	9207      	str	r2, [sp, #28]
 800253a:	e014      	b.n	8002566 <_vfiprintf_r+0x156>
 800253c:	eba0 0308 	sub.w	r3, r0, r8
 8002540:	fa09 f303 	lsl.w	r3, r9, r3
 8002544:	4313      	orrs	r3, r2
 8002546:	46a2      	mov	sl, r4
 8002548:	9304      	str	r3, [sp, #16]
 800254a:	e7d2      	b.n	80024f2 <_vfiprintf_r+0xe2>
 800254c:	9b03      	ldr	r3, [sp, #12]
 800254e:	1d19      	adds	r1, r3, #4
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	9103      	str	r1, [sp, #12]
 8002554:	2b00      	cmp	r3, #0
 8002556:	bfbb      	ittet	lt
 8002558:	425b      	neglt	r3, r3
 800255a:	f042 0202 	orrlt.w	r2, r2, #2
 800255e:	9307      	strge	r3, [sp, #28]
 8002560:	9307      	strlt	r3, [sp, #28]
 8002562:	bfb8      	it	lt
 8002564:	9204      	strlt	r2, [sp, #16]
 8002566:	7823      	ldrb	r3, [r4, #0]
 8002568:	2b2e      	cmp	r3, #46	; 0x2e
 800256a:	d10c      	bne.n	8002586 <_vfiprintf_r+0x176>
 800256c:	7863      	ldrb	r3, [r4, #1]
 800256e:	2b2a      	cmp	r3, #42	; 0x2a
 8002570:	d135      	bne.n	80025de <_vfiprintf_r+0x1ce>
 8002572:	9b03      	ldr	r3, [sp, #12]
 8002574:	3402      	adds	r4, #2
 8002576:	1d1a      	adds	r2, r3, #4
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	9203      	str	r2, [sp, #12]
 800257c:	2b00      	cmp	r3, #0
 800257e:	bfb8      	it	lt
 8002580:	f04f 33ff 	movlt.w	r3, #4294967295
 8002584:	9305      	str	r3, [sp, #20]
 8002586:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002660 <_vfiprintf_r+0x250>
 800258a:	2203      	movs	r2, #3
 800258c:	4650      	mov	r0, sl
 800258e:	7821      	ldrb	r1, [r4, #0]
 8002590:	f000 fc70 	bl	8002e74 <memchr>
 8002594:	b140      	cbz	r0, 80025a8 <_vfiprintf_r+0x198>
 8002596:	2340      	movs	r3, #64	; 0x40
 8002598:	eba0 000a 	sub.w	r0, r0, sl
 800259c:	fa03 f000 	lsl.w	r0, r3, r0
 80025a0:	9b04      	ldr	r3, [sp, #16]
 80025a2:	3401      	adds	r4, #1
 80025a4:	4303      	orrs	r3, r0
 80025a6:	9304      	str	r3, [sp, #16]
 80025a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025ac:	2206      	movs	r2, #6
 80025ae:	482d      	ldr	r0, [pc, #180]	; (8002664 <_vfiprintf_r+0x254>)
 80025b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80025b4:	f000 fc5e 	bl	8002e74 <memchr>
 80025b8:	2800      	cmp	r0, #0
 80025ba:	d03f      	beq.n	800263c <_vfiprintf_r+0x22c>
 80025bc:	4b2a      	ldr	r3, [pc, #168]	; (8002668 <_vfiprintf_r+0x258>)
 80025be:	bb1b      	cbnz	r3, 8002608 <_vfiprintf_r+0x1f8>
 80025c0:	9b03      	ldr	r3, [sp, #12]
 80025c2:	3307      	adds	r3, #7
 80025c4:	f023 0307 	bic.w	r3, r3, #7
 80025c8:	3308      	adds	r3, #8
 80025ca:	9303      	str	r3, [sp, #12]
 80025cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80025ce:	443b      	add	r3, r7
 80025d0:	9309      	str	r3, [sp, #36]	; 0x24
 80025d2:	e767      	b.n	80024a4 <_vfiprintf_r+0x94>
 80025d4:	460c      	mov	r4, r1
 80025d6:	2001      	movs	r0, #1
 80025d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80025dc:	e7a5      	b.n	800252a <_vfiprintf_r+0x11a>
 80025de:	2300      	movs	r3, #0
 80025e0:	f04f 0c0a 	mov.w	ip, #10
 80025e4:	4619      	mov	r1, r3
 80025e6:	3401      	adds	r4, #1
 80025e8:	9305      	str	r3, [sp, #20]
 80025ea:	4620      	mov	r0, r4
 80025ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80025f0:	3a30      	subs	r2, #48	; 0x30
 80025f2:	2a09      	cmp	r2, #9
 80025f4:	d903      	bls.n	80025fe <_vfiprintf_r+0x1ee>
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0c5      	beq.n	8002586 <_vfiprintf_r+0x176>
 80025fa:	9105      	str	r1, [sp, #20]
 80025fc:	e7c3      	b.n	8002586 <_vfiprintf_r+0x176>
 80025fe:	4604      	mov	r4, r0
 8002600:	2301      	movs	r3, #1
 8002602:	fb0c 2101 	mla	r1, ip, r1, r2
 8002606:	e7f0      	b.n	80025ea <_vfiprintf_r+0x1da>
 8002608:	ab03      	add	r3, sp, #12
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	462a      	mov	r2, r5
 800260e:	4630      	mov	r0, r6
 8002610:	4b16      	ldr	r3, [pc, #88]	; (800266c <_vfiprintf_r+0x25c>)
 8002612:	a904      	add	r1, sp, #16
 8002614:	f3af 8000 	nop.w
 8002618:	4607      	mov	r7, r0
 800261a:	1c78      	adds	r0, r7, #1
 800261c:	d1d6      	bne.n	80025cc <_vfiprintf_r+0x1bc>
 800261e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002620:	07d9      	lsls	r1, r3, #31
 8002622:	d405      	bmi.n	8002630 <_vfiprintf_r+0x220>
 8002624:	89ab      	ldrh	r3, [r5, #12]
 8002626:	059a      	lsls	r2, r3, #22
 8002628:	d402      	bmi.n	8002630 <_vfiprintf_r+0x220>
 800262a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800262c:	f7ff fe33 	bl	8002296 <__retarget_lock_release_recursive>
 8002630:	89ab      	ldrh	r3, [r5, #12]
 8002632:	065b      	lsls	r3, r3, #25
 8002634:	f53f af12 	bmi.w	800245c <_vfiprintf_r+0x4c>
 8002638:	9809      	ldr	r0, [sp, #36]	; 0x24
 800263a:	e711      	b.n	8002460 <_vfiprintf_r+0x50>
 800263c:	ab03      	add	r3, sp, #12
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	462a      	mov	r2, r5
 8002642:	4630      	mov	r0, r6
 8002644:	4b09      	ldr	r3, [pc, #36]	; (800266c <_vfiprintf_r+0x25c>)
 8002646:	a904      	add	r1, sp, #16
 8002648:	f000 f882 	bl	8002750 <_printf_i>
 800264c:	e7e4      	b.n	8002618 <_vfiprintf_r+0x208>
 800264e:	bf00      	nop
 8002650:	08003308 	.word	0x08003308
 8002654:	08003328 	.word	0x08003328
 8002658:	080032e8 	.word	0x080032e8
 800265c:	08003348 	.word	0x08003348
 8002660:	0800334e 	.word	0x0800334e
 8002664:	08003352 	.word	0x08003352
 8002668:	00000000 	.word	0x00000000
 800266c:	080023eb 	.word	0x080023eb

08002670 <_printf_common>:
 8002670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002674:	4616      	mov	r6, r2
 8002676:	4699      	mov	r9, r3
 8002678:	688a      	ldr	r2, [r1, #8]
 800267a:	690b      	ldr	r3, [r1, #16]
 800267c:	4607      	mov	r7, r0
 800267e:	4293      	cmp	r3, r2
 8002680:	bfb8      	it	lt
 8002682:	4613      	movlt	r3, r2
 8002684:	6033      	str	r3, [r6, #0]
 8002686:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800268a:	460c      	mov	r4, r1
 800268c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002690:	b10a      	cbz	r2, 8002696 <_printf_common+0x26>
 8002692:	3301      	adds	r3, #1
 8002694:	6033      	str	r3, [r6, #0]
 8002696:	6823      	ldr	r3, [r4, #0]
 8002698:	0699      	lsls	r1, r3, #26
 800269a:	bf42      	ittt	mi
 800269c:	6833      	ldrmi	r3, [r6, #0]
 800269e:	3302      	addmi	r3, #2
 80026a0:	6033      	strmi	r3, [r6, #0]
 80026a2:	6825      	ldr	r5, [r4, #0]
 80026a4:	f015 0506 	ands.w	r5, r5, #6
 80026a8:	d106      	bne.n	80026b8 <_printf_common+0x48>
 80026aa:	f104 0a19 	add.w	sl, r4, #25
 80026ae:	68e3      	ldr	r3, [r4, #12]
 80026b0:	6832      	ldr	r2, [r6, #0]
 80026b2:	1a9b      	subs	r3, r3, r2
 80026b4:	42ab      	cmp	r3, r5
 80026b6:	dc28      	bgt.n	800270a <_printf_common+0x9a>
 80026b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80026bc:	1e13      	subs	r3, r2, #0
 80026be:	6822      	ldr	r2, [r4, #0]
 80026c0:	bf18      	it	ne
 80026c2:	2301      	movne	r3, #1
 80026c4:	0692      	lsls	r2, r2, #26
 80026c6:	d42d      	bmi.n	8002724 <_printf_common+0xb4>
 80026c8:	4649      	mov	r1, r9
 80026ca:	4638      	mov	r0, r7
 80026cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80026d0:	47c0      	blx	r8
 80026d2:	3001      	adds	r0, #1
 80026d4:	d020      	beq.n	8002718 <_printf_common+0xa8>
 80026d6:	6823      	ldr	r3, [r4, #0]
 80026d8:	68e5      	ldr	r5, [r4, #12]
 80026da:	f003 0306 	and.w	r3, r3, #6
 80026de:	2b04      	cmp	r3, #4
 80026e0:	bf18      	it	ne
 80026e2:	2500      	movne	r5, #0
 80026e4:	6832      	ldr	r2, [r6, #0]
 80026e6:	f04f 0600 	mov.w	r6, #0
 80026ea:	68a3      	ldr	r3, [r4, #8]
 80026ec:	bf08      	it	eq
 80026ee:	1aad      	subeq	r5, r5, r2
 80026f0:	6922      	ldr	r2, [r4, #16]
 80026f2:	bf08      	it	eq
 80026f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80026f8:	4293      	cmp	r3, r2
 80026fa:	bfc4      	itt	gt
 80026fc:	1a9b      	subgt	r3, r3, r2
 80026fe:	18ed      	addgt	r5, r5, r3
 8002700:	341a      	adds	r4, #26
 8002702:	42b5      	cmp	r5, r6
 8002704:	d11a      	bne.n	800273c <_printf_common+0xcc>
 8002706:	2000      	movs	r0, #0
 8002708:	e008      	b.n	800271c <_printf_common+0xac>
 800270a:	2301      	movs	r3, #1
 800270c:	4652      	mov	r2, sl
 800270e:	4649      	mov	r1, r9
 8002710:	4638      	mov	r0, r7
 8002712:	47c0      	blx	r8
 8002714:	3001      	adds	r0, #1
 8002716:	d103      	bne.n	8002720 <_printf_common+0xb0>
 8002718:	f04f 30ff 	mov.w	r0, #4294967295
 800271c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002720:	3501      	adds	r5, #1
 8002722:	e7c4      	b.n	80026ae <_printf_common+0x3e>
 8002724:	2030      	movs	r0, #48	; 0x30
 8002726:	18e1      	adds	r1, r4, r3
 8002728:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800272c:	1c5a      	adds	r2, r3, #1
 800272e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002732:	4422      	add	r2, r4
 8002734:	3302      	adds	r3, #2
 8002736:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800273a:	e7c5      	b.n	80026c8 <_printf_common+0x58>
 800273c:	2301      	movs	r3, #1
 800273e:	4622      	mov	r2, r4
 8002740:	4649      	mov	r1, r9
 8002742:	4638      	mov	r0, r7
 8002744:	47c0      	blx	r8
 8002746:	3001      	adds	r0, #1
 8002748:	d0e6      	beq.n	8002718 <_printf_common+0xa8>
 800274a:	3601      	adds	r6, #1
 800274c:	e7d9      	b.n	8002702 <_printf_common+0x92>
	...

08002750 <_printf_i>:
 8002750:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002754:	7e0f      	ldrb	r7, [r1, #24]
 8002756:	4691      	mov	r9, r2
 8002758:	2f78      	cmp	r7, #120	; 0x78
 800275a:	4680      	mov	r8, r0
 800275c:	460c      	mov	r4, r1
 800275e:	469a      	mov	sl, r3
 8002760:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002762:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002766:	d807      	bhi.n	8002778 <_printf_i+0x28>
 8002768:	2f62      	cmp	r7, #98	; 0x62
 800276a:	d80a      	bhi.n	8002782 <_printf_i+0x32>
 800276c:	2f00      	cmp	r7, #0
 800276e:	f000 80d9 	beq.w	8002924 <_printf_i+0x1d4>
 8002772:	2f58      	cmp	r7, #88	; 0x58
 8002774:	f000 80a4 	beq.w	80028c0 <_printf_i+0x170>
 8002778:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800277c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002780:	e03a      	b.n	80027f8 <_printf_i+0xa8>
 8002782:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002786:	2b15      	cmp	r3, #21
 8002788:	d8f6      	bhi.n	8002778 <_printf_i+0x28>
 800278a:	a101      	add	r1, pc, #4	; (adr r1, 8002790 <_printf_i+0x40>)
 800278c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002790:	080027e9 	.word	0x080027e9
 8002794:	080027fd 	.word	0x080027fd
 8002798:	08002779 	.word	0x08002779
 800279c:	08002779 	.word	0x08002779
 80027a0:	08002779 	.word	0x08002779
 80027a4:	08002779 	.word	0x08002779
 80027a8:	080027fd 	.word	0x080027fd
 80027ac:	08002779 	.word	0x08002779
 80027b0:	08002779 	.word	0x08002779
 80027b4:	08002779 	.word	0x08002779
 80027b8:	08002779 	.word	0x08002779
 80027bc:	0800290b 	.word	0x0800290b
 80027c0:	0800282d 	.word	0x0800282d
 80027c4:	080028ed 	.word	0x080028ed
 80027c8:	08002779 	.word	0x08002779
 80027cc:	08002779 	.word	0x08002779
 80027d0:	0800292d 	.word	0x0800292d
 80027d4:	08002779 	.word	0x08002779
 80027d8:	0800282d 	.word	0x0800282d
 80027dc:	08002779 	.word	0x08002779
 80027e0:	08002779 	.word	0x08002779
 80027e4:	080028f5 	.word	0x080028f5
 80027e8:	682b      	ldr	r3, [r5, #0]
 80027ea:	1d1a      	adds	r2, r3, #4
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	602a      	str	r2, [r5, #0]
 80027f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80027f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80027f8:	2301      	movs	r3, #1
 80027fa:	e0a4      	b.n	8002946 <_printf_i+0x1f6>
 80027fc:	6820      	ldr	r0, [r4, #0]
 80027fe:	6829      	ldr	r1, [r5, #0]
 8002800:	0606      	lsls	r6, r0, #24
 8002802:	f101 0304 	add.w	r3, r1, #4
 8002806:	d50a      	bpl.n	800281e <_printf_i+0xce>
 8002808:	680e      	ldr	r6, [r1, #0]
 800280a:	602b      	str	r3, [r5, #0]
 800280c:	2e00      	cmp	r6, #0
 800280e:	da03      	bge.n	8002818 <_printf_i+0xc8>
 8002810:	232d      	movs	r3, #45	; 0x2d
 8002812:	4276      	negs	r6, r6
 8002814:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002818:	230a      	movs	r3, #10
 800281a:	485e      	ldr	r0, [pc, #376]	; (8002994 <_printf_i+0x244>)
 800281c:	e019      	b.n	8002852 <_printf_i+0x102>
 800281e:	680e      	ldr	r6, [r1, #0]
 8002820:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002824:	602b      	str	r3, [r5, #0]
 8002826:	bf18      	it	ne
 8002828:	b236      	sxthne	r6, r6
 800282a:	e7ef      	b.n	800280c <_printf_i+0xbc>
 800282c:	682b      	ldr	r3, [r5, #0]
 800282e:	6820      	ldr	r0, [r4, #0]
 8002830:	1d19      	adds	r1, r3, #4
 8002832:	6029      	str	r1, [r5, #0]
 8002834:	0601      	lsls	r1, r0, #24
 8002836:	d501      	bpl.n	800283c <_printf_i+0xec>
 8002838:	681e      	ldr	r6, [r3, #0]
 800283a:	e002      	b.n	8002842 <_printf_i+0xf2>
 800283c:	0646      	lsls	r6, r0, #25
 800283e:	d5fb      	bpl.n	8002838 <_printf_i+0xe8>
 8002840:	881e      	ldrh	r6, [r3, #0]
 8002842:	2f6f      	cmp	r7, #111	; 0x6f
 8002844:	bf0c      	ite	eq
 8002846:	2308      	moveq	r3, #8
 8002848:	230a      	movne	r3, #10
 800284a:	4852      	ldr	r0, [pc, #328]	; (8002994 <_printf_i+0x244>)
 800284c:	2100      	movs	r1, #0
 800284e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002852:	6865      	ldr	r5, [r4, #4]
 8002854:	2d00      	cmp	r5, #0
 8002856:	bfa8      	it	ge
 8002858:	6821      	ldrge	r1, [r4, #0]
 800285a:	60a5      	str	r5, [r4, #8]
 800285c:	bfa4      	itt	ge
 800285e:	f021 0104 	bicge.w	r1, r1, #4
 8002862:	6021      	strge	r1, [r4, #0]
 8002864:	b90e      	cbnz	r6, 800286a <_printf_i+0x11a>
 8002866:	2d00      	cmp	r5, #0
 8002868:	d04d      	beq.n	8002906 <_printf_i+0x1b6>
 800286a:	4615      	mov	r5, r2
 800286c:	fbb6 f1f3 	udiv	r1, r6, r3
 8002870:	fb03 6711 	mls	r7, r3, r1, r6
 8002874:	5dc7      	ldrb	r7, [r0, r7]
 8002876:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800287a:	4637      	mov	r7, r6
 800287c:	42bb      	cmp	r3, r7
 800287e:	460e      	mov	r6, r1
 8002880:	d9f4      	bls.n	800286c <_printf_i+0x11c>
 8002882:	2b08      	cmp	r3, #8
 8002884:	d10b      	bne.n	800289e <_printf_i+0x14e>
 8002886:	6823      	ldr	r3, [r4, #0]
 8002888:	07de      	lsls	r6, r3, #31
 800288a:	d508      	bpl.n	800289e <_printf_i+0x14e>
 800288c:	6923      	ldr	r3, [r4, #16]
 800288e:	6861      	ldr	r1, [r4, #4]
 8002890:	4299      	cmp	r1, r3
 8002892:	bfde      	ittt	le
 8002894:	2330      	movle	r3, #48	; 0x30
 8002896:	f805 3c01 	strble.w	r3, [r5, #-1]
 800289a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800289e:	1b52      	subs	r2, r2, r5
 80028a0:	6122      	str	r2, [r4, #16]
 80028a2:	464b      	mov	r3, r9
 80028a4:	4621      	mov	r1, r4
 80028a6:	4640      	mov	r0, r8
 80028a8:	f8cd a000 	str.w	sl, [sp]
 80028ac:	aa03      	add	r2, sp, #12
 80028ae:	f7ff fedf 	bl	8002670 <_printf_common>
 80028b2:	3001      	adds	r0, #1
 80028b4:	d14c      	bne.n	8002950 <_printf_i+0x200>
 80028b6:	f04f 30ff 	mov.w	r0, #4294967295
 80028ba:	b004      	add	sp, #16
 80028bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028c0:	4834      	ldr	r0, [pc, #208]	; (8002994 <_printf_i+0x244>)
 80028c2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80028c6:	6829      	ldr	r1, [r5, #0]
 80028c8:	6823      	ldr	r3, [r4, #0]
 80028ca:	f851 6b04 	ldr.w	r6, [r1], #4
 80028ce:	6029      	str	r1, [r5, #0]
 80028d0:	061d      	lsls	r5, r3, #24
 80028d2:	d514      	bpl.n	80028fe <_printf_i+0x1ae>
 80028d4:	07df      	lsls	r7, r3, #31
 80028d6:	bf44      	itt	mi
 80028d8:	f043 0320 	orrmi.w	r3, r3, #32
 80028dc:	6023      	strmi	r3, [r4, #0]
 80028de:	b91e      	cbnz	r6, 80028e8 <_printf_i+0x198>
 80028e0:	6823      	ldr	r3, [r4, #0]
 80028e2:	f023 0320 	bic.w	r3, r3, #32
 80028e6:	6023      	str	r3, [r4, #0]
 80028e8:	2310      	movs	r3, #16
 80028ea:	e7af      	b.n	800284c <_printf_i+0xfc>
 80028ec:	6823      	ldr	r3, [r4, #0]
 80028ee:	f043 0320 	orr.w	r3, r3, #32
 80028f2:	6023      	str	r3, [r4, #0]
 80028f4:	2378      	movs	r3, #120	; 0x78
 80028f6:	4828      	ldr	r0, [pc, #160]	; (8002998 <_printf_i+0x248>)
 80028f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80028fc:	e7e3      	b.n	80028c6 <_printf_i+0x176>
 80028fe:	0659      	lsls	r1, r3, #25
 8002900:	bf48      	it	mi
 8002902:	b2b6      	uxthmi	r6, r6
 8002904:	e7e6      	b.n	80028d4 <_printf_i+0x184>
 8002906:	4615      	mov	r5, r2
 8002908:	e7bb      	b.n	8002882 <_printf_i+0x132>
 800290a:	682b      	ldr	r3, [r5, #0]
 800290c:	6826      	ldr	r6, [r4, #0]
 800290e:	1d18      	adds	r0, r3, #4
 8002910:	6961      	ldr	r1, [r4, #20]
 8002912:	6028      	str	r0, [r5, #0]
 8002914:	0635      	lsls	r5, r6, #24
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	d501      	bpl.n	800291e <_printf_i+0x1ce>
 800291a:	6019      	str	r1, [r3, #0]
 800291c:	e002      	b.n	8002924 <_printf_i+0x1d4>
 800291e:	0670      	lsls	r0, r6, #25
 8002920:	d5fb      	bpl.n	800291a <_printf_i+0x1ca>
 8002922:	8019      	strh	r1, [r3, #0]
 8002924:	2300      	movs	r3, #0
 8002926:	4615      	mov	r5, r2
 8002928:	6123      	str	r3, [r4, #16]
 800292a:	e7ba      	b.n	80028a2 <_printf_i+0x152>
 800292c:	682b      	ldr	r3, [r5, #0]
 800292e:	2100      	movs	r1, #0
 8002930:	1d1a      	adds	r2, r3, #4
 8002932:	602a      	str	r2, [r5, #0]
 8002934:	681d      	ldr	r5, [r3, #0]
 8002936:	6862      	ldr	r2, [r4, #4]
 8002938:	4628      	mov	r0, r5
 800293a:	f000 fa9b 	bl	8002e74 <memchr>
 800293e:	b108      	cbz	r0, 8002944 <_printf_i+0x1f4>
 8002940:	1b40      	subs	r0, r0, r5
 8002942:	6060      	str	r0, [r4, #4]
 8002944:	6863      	ldr	r3, [r4, #4]
 8002946:	6123      	str	r3, [r4, #16]
 8002948:	2300      	movs	r3, #0
 800294a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800294e:	e7a8      	b.n	80028a2 <_printf_i+0x152>
 8002950:	462a      	mov	r2, r5
 8002952:	4649      	mov	r1, r9
 8002954:	4640      	mov	r0, r8
 8002956:	6923      	ldr	r3, [r4, #16]
 8002958:	47d0      	blx	sl
 800295a:	3001      	adds	r0, #1
 800295c:	d0ab      	beq.n	80028b6 <_printf_i+0x166>
 800295e:	6823      	ldr	r3, [r4, #0]
 8002960:	079b      	lsls	r3, r3, #30
 8002962:	d413      	bmi.n	800298c <_printf_i+0x23c>
 8002964:	68e0      	ldr	r0, [r4, #12]
 8002966:	9b03      	ldr	r3, [sp, #12]
 8002968:	4298      	cmp	r0, r3
 800296a:	bfb8      	it	lt
 800296c:	4618      	movlt	r0, r3
 800296e:	e7a4      	b.n	80028ba <_printf_i+0x16a>
 8002970:	2301      	movs	r3, #1
 8002972:	4632      	mov	r2, r6
 8002974:	4649      	mov	r1, r9
 8002976:	4640      	mov	r0, r8
 8002978:	47d0      	blx	sl
 800297a:	3001      	adds	r0, #1
 800297c:	d09b      	beq.n	80028b6 <_printf_i+0x166>
 800297e:	3501      	adds	r5, #1
 8002980:	68e3      	ldr	r3, [r4, #12]
 8002982:	9903      	ldr	r1, [sp, #12]
 8002984:	1a5b      	subs	r3, r3, r1
 8002986:	42ab      	cmp	r3, r5
 8002988:	dcf2      	bgt.n	8002970 <_printf_i+0x220>
 800298a:	e7eb      	b.n	8002964 <_printf_i+0x214>
 800298c:	2500      	movs	r5, #0
 800298e:	f104 0619 	add.w	r6, r4, #25
 8002992:	e7f5      	b.n	8002980 <_printf_i+0x230>
 8002994:	08003359 	.word	0x08003359
 8002998:	0800336a 	.word	0x0800336a

0800299c <_sbrk_r>:
 800299c:	b538      	push	{r3, r4, r5, lr}
 800299e:	2300      	movs	r3, #0
 80029a0:	4d05      	ldr	r5, [pc, #20]	; (80029b8 <_sbrk_r+0x1c>)
 80029a2:	4604      	mov	r4, r0
 80029a4:	4608      	mov	r0, r1
 80029a6:	602b      	str	r3, [r5, #0]
 80029a8:	f7fd fe2a 	bl	8000600 <_sbrk>
 80029ac:	1c43      	adds	r3, r0, #1
 80029ae:	d102      	bne.n	80029b6 <_sbrk_r+0x1a>
 80029b0:	682b      	ldr	r3, [r5, #0]
 80029b2:	b103      	cbz	r3, 80029b6 <_sbrk_r+0x1a>
 80029b4:	6023      	str	r3, [r4, #0]
 80029b6:	bd38      	pop	{r3, r4, r5, pc}
 80029b8:	2000013c 	.word	0x2000013c

080029bc <__sread>:
 80029bc:	b510      	push	{r4, lr}
 80029be:	460c      	mov	r4, r1
 80029c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029c4:	f000 fab8 	bl	8002f38 <_read_r>
 80029c8:	2800      	cmp	r0, #0
 80029ca:	bfab      	itete	ge
 80029cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80029ce:	89a3      	ldrhlt	r3, [r4, #12]
 80029d0:	181b      	addge	r3, r3, r0
 80029d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80029d6:	bfac      	ite	ge
 80029d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80029da:	81a3      	strhlt	r3, [r4, #12]
 80029dc:	bd10      	pop	{r4, pc}

080029de <__swrite>:
 80029de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029e2:	461f      	mov	r7, r3
 80029e4:	898b      	ldrh	r3, [r1, #12]
 80029e6:	4605      	mov	r5, r0
 80029e8:	05db      	lsls	r3, r3, #23
 80029ea:	460c      	mov	r4, r1
 80029ec:	4616      	mov	r6, r2
 80029ee:	d505      	bpl.n	80029fc <__swrite+0x1e>
 80029f0:	2302      	movs	r3, #2
 80029f2:	2200      	movs	r2, #0
 80029f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029f8:	f000 f9c4 	bl	8002d84 <_lseek_r>
 80029fc:	89a3      	ldrh	r3, [r4, #12]
 80029fe:	4632      	mov	r2, r6
 8002a00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a04:	81a3      	strh	r3, [r4, #12]
 8002a06:	4628      	mov	r0, r5
 8002a08:	463b      	mov	r3, r7
 8002a0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002a0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002a12:	f000 b869 	b.w	8002ae8 <_write_r>

08002a16 <__sseek>:
 8002a16:	b510      	push	{r4, lr}
 8002a18:	460c      	mov	r4, r1
 8002a1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a1e:	f000 f9b1 	bl	8002d84 <_lseek_r>
 8002a22:	1c43      	adds	r3, r0, #1
 8002a24:	89a3      	ldrh	r3, [r4, #12]
 8002a26:	bf15      	itete	ne
 8002a28:	6560      	strne	r0, [r4, #84]	; 0x54
 8002a2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002a2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002a32:	81a3      	strheq	r3, [r4, #12]
 8002a34:	bf18      	it	ne
 8002a36:	81a3      	strhne	r3, [r4, #12]
 8002a38:	bd10      	pop	{r4, pc}

08002a3a <__sclose>:
 8002a3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a3e:	f000 b8d3 	b.w	8002be8 <_close_r>
	...

08002a44 <__swbuf_r>:
 8002a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a46:	460e      	mov	r6, r1
 8002a48:	4614      	mov	r4, r2
 8002a4a:	4605      	mov	r5, r0
 8002a4c:	b118      	cbz	r0, 8002a56 <__swbuf_r+0x12>
 8002a4e:	6983      	ldr	r3, [r0, #24]
 8002a50:	b90b      	cbnz	r3, 8002a56 <__swbuf_r+0x12>
 8002a52:	f7ff fb81 	bl	8002158 <__sinit>
 8002a56:	4b21      	ldr	r3, [pc, #132]	; (8002adc <__swbuf_r+0x98>)
 8002a58:	429c      	cmp	r4, r3
 8002a5a:	d12b      	bne.n	8002ab4 <__swbuf_r+0x70>
 8002a5c:	686c      	ldr	r4, [r5, #4]
 8002a5e:	69a3      	ldr	r3, [r4, #24]
 8002a60:	60a3      	str	r3, [r4, #8]
 8002a62:	89a3      	ldrh	r3, [r4, #12]
 8002a64:	071a      	lsls	r2, r3, #28
 8002a66:	d52f      	bpl.n	8002ac8 <__swbuf_r+0x84>
 8002a68:	6923      	ldr	r3, [r4, #16]
 8002a6a:	b36b      	cbz	r3, 8002ac8 <__swbuf_r+0x84>
 8002a6c:	6923      	ldr	r3, [r4, #16]
 8002a6e:	6820      	ldr	r0, [r4, #0]
 8002a70:	b2f6      	uxtb	r6, r6
 8002a72:	1ac0      	subs	r0, r0, r3
 8002a74:	6963      	ldr	r3, [r4, #20]
 8002a76:	4637      	mov	r7, r6
 8002a78:	4283      	cmp	r3, r0
 8002a7a:	dc04      	bgt.n	8002a86 <__swbuf_r+0x42>
 8002a7c:	4621      	mov	r1, r4
 8002a7e:	4628      	mov	r0, r5
 8002a80:	f000 f944 	bl	8002d0c <_fflush_r>
 8002a84:	bb30      	cbnz	r0, 8002ad4 <__swbuf_r+0x90>
 8002a86:	68a3      	ldr	r3, [r4, #8]
 8002a88:	3001      	adds	r0, #1
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	60a3      	str	r3, [r4, #8]
 8002a8e:	6823      	ldr	r3, [r4, #0]
 8002a90:	1c5a      	adds	r2, r3, #1
 8002a92:	6022      	str	r2, [r4, #0]
 8002a94:	701e      	strb	r6, [r3, #0]
 8002a96:	6963      	ldr	r3, [r4, #20]
 8002a98:	4283      	cmp	r3, r0
 8002a9a:	d004      	beq.n	8002aa6 <__swbuf_r+0x62>
 8002a9c:	89a3      	ldrh	r3, [r4, #12]
 8002a9e:	07db      	lsls	r3, r3, #31
 8002aa0:	d506      	bpl.n	8002ab0 <__swbuf_r+0x6c>
 8002aa2:	2e0a      	cmp	r6, #10
 8002aa4:	d104      	bne.n	8002ab0 <__swbuf_r+0x6c>
 8002aa6:	4621      	mov	r1, r4
 8002aa8:	4628      	mov	r0, r5
 8002aaa:	f000 f92f 	bl	8002d0c <_fflush_r>
 8002aae:	b988      	cbnz	r0, 8002ad4 <__swbuf_r+0x90>
 8002ab0:	4638      	mov	r0, r7
 8002ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ab4:	4b0a      	ldr	r3, [pc, #40]	; (8002ae0 <__swbuf_r+0x9c>)
 8002ab6:	429c      	cmp	r4, r3
 8002ab8:	d101      	bne.n	8002abe <__swbuf_r+0x7a>
 8002aba:	68ac      	ldr	r4, [r5, #8]
 8002abc:	e7cf      	b.n	8002a5e <__swbuf_r+0x1a>
 8002abe:	4b09      	ldr	r3, [pc, #36]	; (8002ae4 <__swbuf_r+0xa0>)
 8002ac0:	429c      	cmp	r4, r3
 8002ac2:	bf08      	it	eq
 8002ac4:	68ec      	ldreq	r4, [r5, #12]
 8002ac6:	e7ca      	b.n	8002a5e <__swbuf_r+0x1a>
 8002ac8:	4621      	mov	r1, r4
 8002aca:	4628      	mov	r0, r5
 8002acc:	f000 f81e 	bl	8002b0c <__swsetup_r>
 8002ad0:	2800      	cmp	r0, #0
 8002ad2:	d0cb      	beq.n	8002a6c <__swbuf_r+0x28>
 8002ad4:	f04f 37ff 	mov.w	r7, #4294967295
 8002ad8:	e7ea      	b.n	8002ab0 <__swbuf_r+0x6c>
 8002ada:	bf00      	nop
 8002adc:	08003308 	.word	0x08003308
 8002ae0:	08003328 	.word	0x08003328
 8002ae4:	080032e8 	.word	0x080032e8

08002ae8 <_write_r>:
 8002ae8:	b538      	push	{r3, r4, r5, lr}
 8002aea:	4604      	mov	r4, r0
 8002aec:	4608      	mov	r0, r1
 8002aee:	4611      	mov	r1, r2
 8002af0:	2200      	movs	r2, #0
 8002af2:	4d05      	ldr	r5, [pc, #20]	; (8002b08 <_write_r+0x20>)
 8002af4:	602a      	str	r2, [r5, #0]
 8002af6:	461a      	mov	r2, r3
 8002af8:	f7fd fd36 	bl	8000568 <_write>
 8002afc:	1c43      	adds	r3, r0, #1
 8002afe:	d102      	bne.n	8002b06 <_write_r+0x1e>
 8002b00:	682b      	ldr	r3, [r5, #0]
 8002b02:	b103      	cbz	r3, 8002b06 <_write_r+0x1e>
 8002b04:	6023      	str	r3, [r4, #0]
 8002b06:	bd38      	pop	{r3, r4, r5, pc}
 8002b08:	2000013c 	.word	0x2000013c

08002b0c <__swsetup_r>:
 8002b0c:	4b32      	ldr	r3, [pc, #200]	; (8002bd8 <__swsetup_r+0xcc>)
 8002b0e:	b570      	push	{r4, r5, r6, lr}
 8002b10:	681d      	ldr	r5, [r3, #0]
 8002b12:	4606      	mov	r6, r0
 8002b14:	460c      	mov	r4, r1
 8002b16:	b125      	cbz	r5, 8002b22 <__swsetup_r+0x16>
 8002b18:	69ab      	ldr	r3, [r5, #24]
 8002b1a:	b913      	cbnz	r3, 8002b22 <__swsetup_r+0x16>
 8002b1c:	4628      	mov	r0, r5
 8002b1e:	f7ff fb1b 	bl	8002158 <__sinit>
 8002b22:	4b2e      	ldr	r3, [pc, #184]	; (8002bdc <__swsetup_r+0xd0>)
 8002b24:	429c      	cmp	r4, r3
 8002b26:	d10f      	bne.n	8002b48 <__swsetup_r+0x3c>
 8002b28:	686c      	ldr	r4, [r5, #4]
 8002b2a:	89a3      	ldrh	r3, [r4, #12]
 8002b2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002b30:	0719      	lsls	r1, r3, #28
 8002b32:	d42c      	bmi.n	8002b8e <__swsetup_r+0x82>
 8002b34:	06dd      	lsls	r5, r3, #27
 8002b36:	d411      	bmi.n	8002b5c <__swsetup_r+0x50>
 8002b38:	2309      	movs	r3, #9
 8002b3a:	6033      	str	r3, [r6, #0]
 8002b3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002b40:	f04f 30ff 	mov.w	r0, #4294967295
 8002b44:	81a3      	strh	r3, [r4, #12]
 8002b46:	e03e      	b.n	8002bc6 <__swsetup_r+0xba>
 8002b48:	4b25      	ldr	r3, [pc, #148]	; (8002be0 <__swsetup_r+0xd4>)
 8002b4a:	429c      	cmp	r4, r3
 8002b4c:	d101      	bne.n	8002b52 <__swsetup_r+0x46>
 8002b4e:	68ac      	ldr	r4, [r5, #8]
 8002b50:	e7eb      	b.n	8002b2a <__swsetup_r+0x1e>
 8002b52:	4b24      	ldr	r3, [pc, #144]	; (8002be4 <__swsetup_r+0xd8>)
 8002b54:	429c      	cmp	r4, r3
 8002b56:	bf08      	it	eq
 8002b58:	68ec      	ldreq	r4, [r5, #12]
 8002b5a:	e7e6      	b.n	8002b2a <__swsetup_r+0x1e>
 8002b5c:	0758      	lsls	r0, r3, #29
 8002b5e:	d512      	bpl.n	8002b86 <__swsetup_r+0x7a>
 8002b60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b62:	b141      	cbz	r1, 8002b76 <__swsetup_r+0x6a>
 8002b64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002b68:	4299      	cmp	r1, r3
 8002b6a:	d002      	beq.n	8002b72 <__swsetup_r+0x66>
 8002b6c:	4630      	mov	r0, r6
 8002b6e:	f000 f99b 	bl	8002ea8 <_free_r>
 8002b72:	2300      	movs	r3, #0
 8002b74:	6363      	str	r3, [r4, #52]	; 0x34
 8002b76:	89a3      	ldrh	r3, [r4, #12]
 8002b78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002b7c:	81a3      	strh	r3, [r4, #12]
 8002b7e:	2300      	movs	r3, #0
 8002b80:	6063      	str	r3, [r4, #4]
 8002b82:	6923      	ldr	r3, [r4, #16]
 8002b84:	6023      	str	r3, [r4, #0]
 8002b86:	89a3      	ldrh	r3, [r4, #12]
 8002b88:	f043 0308 	orr.w	r3, r3, #8
 8002b8c:	81a3      	strh	r3, [r4, #12]
 8002b8e:	6923      	ldr	r3, [r4, #16]
 8002b90:	b94b      	cbnz	r3, 8002ba6 <__swsetup_r+0x9a>
 8002b92:	89a3      	ldrh	r3, [r4, #12]
 8002b94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002b98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b9c:	d003      	beq.n	8002ba6 <__swsetup_r+0x9a>
 8002b9e:	4621      	mov	r1, r4
 8002ba0:	4630      	mov	r0, r6
 8002ba2:	f000 f927 	bl	8002df4 <__smakebuf_r>
 8002ba6:	89a0      	ldrh	r0, [r4, #12]
 8002ba8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002bac:	f010 0301 	ands.w	r3, r0, #1
 8002bb0:	d00a      	beq.n	8002bc8 <__swsetup_r+0xbc>
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60a3      	str	r3, [r4, #8]
 8002bb6:	6963      	ldr	r3, [r4, #20]
 8002bb8:	425b      	negs	r3, r3
 8002bba:	61a3      	str	r3, [r4, #24]
 8002bbc:	6923      	ldr	r3, [r4, #16]
 8002bbe:	b943      	cbnz	r3, 8002bd2 <__swsetup_r+0xc6>
 8002bc0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002bc4:	d1ba      	bne.n	8002b3c <__swsetup_r+0x30>
 8002bc6:	bd70      	pop	{r4, r5, r6, pc}
 8002bc8:	0781      	lsls	r1, r0, #30
 8002bca:	bf58      	it	pl
 8002bcc:	6963      	ldrpl	r3, [r4, #20]
 8002bce:	60a3      	str	r3, [r4, #8]
 8002bd0:	e7f4      	b.n	8002bbc <__swsetup_r+0xb0>
 8002bd2:	2000      	movs	r0, #0
 8002bd4:	e7f7      	b.n	8002bc6 <__swsetup_r+0xba>
 8002bd6:	bf00      	nop
 8002bd8:	2000000c 	.word	0x2000000c
 8002bdc:	08003308 	.word	0x08003308
 8002be0:	08003328 	.word	0x08003328
 8002be4:	080032e8 	.word	0x080032e8

08002be8 <_close_r>:
 8002be8:	b538      	push	{r3, r4, r5, lr}
 8002bea:	2300      	movs	r3, #0
 8002bec:	4d05      	ldr	r5, [pc, #20]	; (8002c04 <_close_r+0x1c>)
 8002bee:	4604      	mov	r4, r0
 8002bf0:	4608      	mov	r0, r1
 8002bf2:	602b      	str	r3, [r5, #0]
 8002bf4:	f7fd fcd4 	bl	80005a0 <_close>
 8002bf8:	1c43      	adds	r3, r0, #1
 8002bfa:	d102      	bne.n	8002c02 <_close_r+0x1a>
 8002bfc:	682b      	ldr	r3, [r5, #0]
 8002bfe:	b103      	cbz	r3, 8002c02 <_close_r+0x1a>
 8002c00:	6023      	str	r3, [r4, #0]
 8002c02:	bd38      	pop	{r3, r4, r5, pc}
 8002c04:	2000013c 	.word	0x2000013c

08002c08 <__sflush_r>:
 8002c08:	898a      	ldrh	r2, [r1, #12]
 8002c0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c0c:	4605      	mov	r5, r0
 8002c0e:	0710      	lsls	r0, r2, #28
 8002c10:	460c      	mov	r4, r1
 8002c12:	d457      	bmi.n	8002cc4 <__sflush_r+0xbc>
 8002c14:	684b      	ldr	r3, [r1, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	dc04      	bgt.n	8002c24 <__sflush_r+0x1c>
 8002c1a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	dc01      	bgt.n	8002c24 <__sflush_r+0x1c>
 8002c20:	2000      	movs	r0, #0
 8002c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002c26:	2e00      	cmp	r6, #0
 8002c28:	d0fa      	beq.n	8002c20 <__sflush_r+0x18>
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002c30:	682f      	ldr	r7, [r5, #0]
 8002c32:	602b      	str	r3, [r5, #0]
 8002c34:	d032      	beq.n	8002c9c <__sflush_r+0x94>
 8002c36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002c38:	89a3      	ldrh	r3, [r4, #12]
 8002c3a:	075a      	lsls	r2, r3, #29
 8002c3c:	d505      	bpl.n	8002c4a <__sflush_r+0x42>
 8002c3e:	6863      	ldr	r3, [r4, #4]
 8002c40:	1ac0      	subs	r0, r0, r3
 8002c42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002c44:	b10b      	cbz	r3, 8002c4a <__sflush_r+0x42>
 8002c46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002c48:	1ac0      	subs	r0, r0, r3
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002c50:	4628      	mov	r0, r5
 8002c52:	6a21      	ldr	r1, [r4, #32]
 8002c54:	47b0      	blx	r6
 8002c56:	1c43      	adds	r3, r0, #1
 8002c58:	89a3      	ldrh	r3, [r4, #12]
 8002c5a:	d106      	bne.n	8002c6a <__sflush_r+0x62>
 8002c5c:	6829      	ldr	r1, [r5, #0]
 8002c5e:	291d      	cmp	r1, #29
 8002c60:	d82c      	bhi.n	8002cbc <__sflush_r+0xb4>
 8002c62:	4a29      	ldr	r2, [pc, #164]	; (8002d08 <__sflush_r+0x100>)
 8002c64:	40ca      	lsrs	r2, r1
 8002c66:	07d6      	lsls	r6, r2, #31
 8002c68:	d528      	bpl.n	8002cbc <__sflush_r+0xb4>
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	6062      	str	r2, [r4, #4]
 8002c6e:	6922      	ldr	r2, [r4, #16]
 8002c70:	04d9      	lsls	r1, r3, #19
 8002c72:	6022      	str	r2, [r4, #0]
 8002c74:	d504      	bpl.n	8002c80 <__sflush_r+0x78>
 8002c76:	1c42      	adds	r2, r0, #1
 8002c78:	d101      	bne.n	8002c7e <__sflush_r+0x76>
 8002c7a:	682b      	ldr	r3, [r5, #0]
 8002c7c:	b903      	cbnz	r3, 8002c80 <__sflush_r+0x78>
 8002c7e:	6560      	str	r0, [r4, #84]	; 0x54
 8002c80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c82:	602f      	str	r7, [r5, #0]
 8002c84:	2900      	cmp	r1, #0
 8002c86:	d0cb      	beq.n	8002c20 <__sflush_r+0x18>
 8002c88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002c8c:	4299      	cmp	r1, r3
 8002c8e:	d002      	beq.n	8002c96 <__sflush_r+0x8e>
 8002c90:	4628      	mov	r0, r5
 8002c92:	f000 f909 	bl	8002ea8 <_free_r>
 8002c96:	2000      	movs	r0, #0
 8002c98:	6360      	str	r0, [r4, #52]	; 0x34
 8002c9a:	e7c2      	b.n	8002c22 <__sflush_r+0x1a>
 8002c9c:	6a21      	ldr	r1, [r4, #32]
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	4628      	mov	r0, r5
 8002ca2:	47b0      	blx	r6
 8002ca4:	1c41      	adds	r1, r0, #1
 8002ca6:	d1c7      	bne.n	8002c38 <__sflush_r+0x30>
 8002ca8:	682b      	ldr	r3, [r5, #0]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0c4      	beq.n	8002c38 <__sflush_r+0x30>
 8002cae:	2b1d      	cmp	r3, #29
 8002cb0:	d001      	beq.n	8002cb6 <__sflush_r+0xae>
 8002cb2:	2b16      	cmp	r3, #22
 8002cb4:	d101      	bne.n	8002cba <__sflush_r+0xb2>
 8002cb6:	602f      	str	r7, [r5, #0]
 8002cb8:	e7b2      	b.n	8002c20 <__sflush_r+0x18>
 8002cba:	89a3      	ldrh	r3, [r4, #12]
 8002cbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cc0:	81a3      	strh	r3, [r4, #12]
 8002cc2:	e7ae      	b.n	8002c22 <__sflush_r+0x1a>
 8002cc4:	690f      	ldr	r7, [r1, #16]
 8002cc6:	2f00      	cmp	r7, #0
 8002cc8:	d0aa      	beq.n	8002c20 <__sflush_r+0x18>
 8002cca:	0793      	lsls	r3, r2, #30
 8002ccc:	bf18      	it	ne
 8002cce:	2300      	movne	r3, #0
 8002cd0:	680e      	ldr	r6, [r1, #0]
 8002cd2:	bf08      	it	eq
 8002cd4:	694b      	ldreq	r3, [r1, #20]
 8002cd6:	1bf6      	subs	r6, r6, r7
 8002cd8:	600f      	str	r7, [r1, #0]
 8002cda:	608b      	str	r3, [r1, #8]
 8002cdc:	2e00      	cmp	r6, #0
 8002cde:	dd9f      	ble.n	8002c20 <__sflush_r+0x18>
 8002ce0:	4633      	mov	r3, r6
 8002ce2:	463a      	mov	r2, r7
 8002ce4:	4628      	mov	r0, r5
 8002ce6:	6a21      	ldr	r1, [r4, #32]
 8002ce8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002cec:	47e0      	blx	ip
 8002cee:	2800      	cmp	r0, #0
 8002cf0:	dc06      	bgt.n	8002d00 <__sflush_r+0xf8>
 8002cf2:	89a3      	ldrh	r3, [r4, #12]
 8002cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cfc:	81a3      	strh	r3, [r4, #12]
 8002cfe:	e790      	b.n	8002c22 <__sflush_r+0x1a>
 8002d00:	4407      	add	r7, r0
 8002d02:	1a36      	subs	r6, r6, r0
 8002d04:	e7ea      	b.n	8002cdc <__sflush_r+0xd4>
 8002d06:	bf00      	nop
 8002d08:	20400001 	.word	0x20400001

08002d0c <_fflush_r>:
 8002d0c:	b538      	push	{r3, r4, r5, lr}
 8002d0e:	690b      	ldr	r3, [r1, #16]
 8002d10:	4605      	mov	r5, r0
 8002d12:	460c      	mov	r4, r1
 8002d14:	b913      	cbnz	r3, 8002d1c <_fflush_r+0x10>
 8002d16:	2500      	movs	r5, #0
 8002d18:	4628      	mov	r0, r5
 8002d1a:	bd38      	pop	{r3, r4, r5, pc}
 8002d1c:	b118      	cbz	r0, 8002d26 <_fflush_r+0x1a>
 8002d1e:	6983      	ldr	r3, [r0, #24]
 8002d20:	b90b      	cbnz	r3, 8002d26 <_fflush_r+0x1a>
 8002d22:	f7ff fa19 	bl	8002158 <__sinit>
 8002d26:	4b14      	ldr	r3, [pc, #80]	; (8002d78 <_fflush_r+0x6c>)
 8002d28:	429c      	cmp	r4, r3
 8002d2a:	d11b      	bne.n	8002d64 <_fflush_r+0x58>
 8002d2c:	686c      	ldr	r4, [r5, #4]
 8002d2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0ef      	beq.n	8002d16 <_fflush_r+0xa>
 8002d36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002d38:	07d0      	lsls	r0, r2, #31
 8002d3a:	d404      	bmi.n	8002d46 <_fflush_r+0x3a>
 8002d3c:	0599      	lsls	r1, r3, #22
 8002d3e:	d402      	bmi.n	8002d46 <_fflush_r+0x3a>
 8002d40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d42:	f7ff faa7 	bl	8002294 <__retarget_lock_acquire_recursive>
 8002d46:	4628      	mov	r0, r5
 8002d48:	4621      	mov	r1, r4
 8002d4a:	f7ff ff5d 	bl	8002c08 <__sflush_r>
 8002d4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d50:	4605      	mov	r5, r0
 8002d52:	07da      	lsls	r2, r3, #31
 8002d54:	d4e0      	bmi.n	8002d18 <_fflush_r+0xc>
 8002d56:	89a3      	ldrh	r3, [r4, #12]
 8002d58:	059b      	lsls	r3, r3, #22
 8002d5a:	d4dd      	bmi.n	8002d18 <_fflush_r+0xc>
 8002d5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d5e:	f7ff fa9a 	bl	8002296 <__retarget_lock_release_recursive>
 8002d62:	e7d9      	b.n	8002d18 <_fflush_r+0xc>
 8002d64:	4b05      	ldr	r3, [pc, #20]	; (8002d7c <_fflush_r+0x70>)
 8002d66:	429c      	cmp	r4, r3
 8002d68:	d101      	bne.n	8002d6e <_fflush_r+0x62>
 8002d6a:	68ac      	ldr	r4, [r5, #8]
 8002d6c:	e7df      	b.n	8002d2e <_fflush_r+0x22>
 8002d6e:	4b04      	ldr	r3, [pc, #16]	; (8002d80 <_fflush_r+0x74>)
 8002d70:	429c      	cmp	r4, r3
 8002d72:	bf08      	it	eq
 8002d74:	68ec      	ldreq	r4, [r5, #12]
 8002d76:	e7da      	b.n	8002d2e <_fflush_r+0x22>
 8002d78:	08003308 	.word	0x08003308
 8002d7c:	08003328 	.word	0x08003328
 8002d80:	080032e8 	.word	0x080032e8

08002d84 <_lseek_r>:
 8002d84:	b538      	push	{r3, r4, r5, lr}
 8002d86:	4604      	mov	r4, r0
 8002d88:	4608      	mov	r0, r1
 8002d8a:	4611      	mov	r1, r2
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	4d05      	ldr	r5, [pc, #20]	; (8002da4 <_lseek_r+0x20>)
 8002d90:	602a      	str	r2, [r5, #0]
 8002d92:	461a      	mov	r2, r3
 8002d94:	f7fd fc28 	bl	80005e8 <_lseek>
 8002d98:	1c43      	adds	r3, r0, #1
 8002d9a:	d102      	bne.n	8002da2 <_lseek_r+0x1e>
 8002d9c:	682b      	ldr	r3, [r5, #0]
 8002d9e:	b103      	cbz	r3, 8002da2 <_lseek_r+0x1e>
 8002da0:	6023      	str	r3, [r4, #0]
 8002da2:	bd38      	pop	{r3, r4, r5, pc}
 8002da4:	2000013c 	.word	0x2000013c

08002da8 <__swhatbuf_r>:
 8002da8:	b570      	push	{r4, r5, r6, lr}
 8002daa:	460e      	mov	r6, r1
 8002dac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002db0:	4614      	mov	r4, r2
 8002db2:	2900      	cmp	r1, #0
 8002db4:	461d      	mov	r5, r3
 8002db6:	b096      	sub	sp, #88	; 0x58
 8002db8:	da08      	bge.n	8002dcc <__swhatbuf_r+0x24>
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002dc0:	602a      	str	r2, [r5, #0]
 8002dc2:	061a      	lsls	r2, r3, #24
 8002dc4:	d410      	bmi.n	8002de8 <__swhatbuf_r+0x40>
 8002dc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dca:	e00e      	b.n	8002dea <__swhatbuf_r+0x42>
 8002dcc:	466a      	mov	r2, sp
 8002dce:	f000 f8c5 	bl	8002f5c <_fstat_r>
 8002dd2:	2800      	cmp	r0, #0
 8002dd4:	dbf1      	blt.n	8002dba <__swhatbuf_r+0x12>
 8002dd6:	9a01      	ldr	r2, [sp, #4]
 8002dd8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002ddc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002de0:	425a      	negs	r2, r3
 8002de2:	415a      	adcs	r2, r3
 8002de4:	602a      	str	r2, [r5, #0]
 8002de6:	e7ee      	b.n	8002dc6 <__swhatbuf_r+0x1e>
 8002de8:	2340      	movs	r3, #64	; 0x40
 8002dea:	2000      	movs	r0, #0
 8002dec:	6023      	str	r3, [r4, #0]
 8002dee:	b016      	add	sp, #88	; 0x58
 8002df0:	bd70      	pop	{r4, r5, r6, pc}
	...

08002df4 <__smakebuf_r>:
 8002df4:	898b      	ldrh	r3, [r1, #12]
 8002df6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002df8:	079d      	lsls	r5, r3, #30
 8002dfa:	4606      	mov	r6, r0
 8002dfc:	460c      	mov	r4, r1
 8002dfe:	d507      	bpl.n	8002e10 <__smakebuf_r+0x1c>
 8002e00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002e04:	6023      	str	r3, [r4, #0]
 8002e06:	6123      	str	r3, [r4, #16]
 8002e08:	2301      	movs	r3, #1
 8002e0a:	6163      	str	r3, [r4, #20]
 8002e0c:	b002      	add	sp, #8
 8002e0e:	bd70      	pop	{r4, r5, r6, pc}
 8002e10:	466a      	mov	r2, sp
 8002e12:	ab01      	add	r3, sp, #4
 8002e14:	f7ff ffc8 	bl	8002da8 <__swhatbuf_r>
 8002e18:	9900      	ldr	r1, [sp, #0]
 8002e1a:	4605      	mov	r5, r0
 8002e1c:	4630      	mov	r0, r6
 8002e1e:	f7ff fa5b 	bl	80022d8 <_malloc_r>
 8002e22:	b948      	cbnz	r0, 8002e38 <__smakebuf_r+0x44>
 8002e24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e28:	059a      	lsls	r2, r3, #22
 8002e2a:	d4ef      	bmi.n	8002e0c <__smakebuf_r+0x18>
 8002e2c:	f023 0303 	bic.w	r3, r3, #3
 8002e30:	f043 0302 	orr.w	r3, r3, #2
 8002e34:	81a3      	strh	r3, [r4, #12]
 8002e36:	e7e3      	b.n	8002e00 <__smakebuf_r+0xc>
 8002e38:	4b0d      	ldr	r3, [pc, #52]	; (8002e70 <__smakebuf_r+0x7c>)
 8002e3a:	62b3      	str	r3, [r6, #40]	; 0x28
 8002e3c:	89a3      	ldrh	r3, [r4, #12]
 8002e3e:	6020      	str	r0, [r4, #0]
 8002e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e44:	81a3      	strh	r3, [r4, #12]
 8002e46:	9b00      	ldr	r3, [sp, #0]
 8002e48:	6120      	str	r0, [r4, #16]
 8002e4a:	6163      	str	r3, [r4, #20]
 8002e4c:	9b01      	ldr	r3, [sp, #4]
 8002e4e:	b15b      	cbz	r3, 8002e68 <__smakebuf_r+0x74>
 8002e50:	4630      	mov	r0, r6
 8002e52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e56:	f000 f893 	bl	8002f80 <_isatty_r>
 8002e5a:	b128      	cbz	r0, 8002e68 <__smakebuf_r+0x74>
 8002e5c:	89a3      	ldrh	r3, [r4, #12]
 8002e5e:	f023 0303 	bic.w	r3, r3, #3
 8002e62:	f043 0301 	orr.w	r3, r3, #1
 8002e66:	81a3      	strh	r3, [r4, #12]
 8002e68:	89a0      	ldrh	r0, [r4, #12]
 8002e6a:	4305      	orrs	r5, r0
 8002e6c:	81a5      	strh	r5, [r4, #12]
 8002e6e:	e7cd      	b.n	8002e0c <__smakebuf_r+0x18>
 8002e70:	080020f1 	.word	0x080020f1

08002e74 <memchr>:
 8002e74:	4603      	mov	r3, r0
 8002e76:	b510      	push	{r4, lr}
 8002e78:	b2c9      	uxtb	r1, r1
 8002e7a:	4402      	add	r2, r0
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	4618      	mov	r0, r3
 8002e80:	d101      	bne.n	8002e86 <memchr+0x12>
 8002e82:	2000      	movs	r0, #0
 8002e84:	e003      	b.n	8002e8e <memchr+0x1a>
 8002e86:	7804      	ldrb	r4, [r0, #0]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	428c      	cmp	r4, r1
 8002e8c:	d1f6      	bne.n	8002e7c <memchr+0x8>
 8002e8e:	bd10      	pop	{r4, pc}

08002e90 <__malloc_lock>:
 8002e90:	4801      	ldr	r0, [pc, #4]	; (8002e98 <__malloc_lock+0x8>)
 8002e92:	f7ff b9ff 	b.w	8002294 <__retarget_lock_acquire_recursive>
 8002e96:	bf00      	nop
 8002e98:	20000130 	.word	0x20000130

08002e9c <__malloc_unlock>:
 8002e9c:	4801      	ldr	r0, [pc, #4]	; (8002ea4 <__malloc_unlock+0x8>)
 8002e9e:	f7ff b9fa 	b.w	8002296 <__retarget_lock_release_recursive>
 8002ea2:	bf00      	nop
 8002ea4:	20000130 	.word	0x20000130

08002ea8 <_free_r>:
 8002ea8:	b538      	push	{r3, r4, r5, lr}
 8002eaa:	4605      	mov	r5, r0
 8002eac:	2900      	cmp	r1, #0
 8002eae:	d040      	beq.n	8002f32 <_free_r+0x8a>
 8002eb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002eb4:	1f0c      	subs	r4, r1, #4
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	bfb8      	it	lt
 8002eba:	18e4      	addlt	r4, r4, r3
 8002ebc:	f7ff ffe8 	bl	8002e90 <__malloc_lock>
 8002ec0:	4a1c      	ldr	r2, [pc, #112]	; (8002f34 <_free_r+0x8c>)
 8002ec2:	6813      	ldr	r3, [r2, #0]
 8002ec4:	b933      	cbnz	r3, 8002ed4 <_free_r+0x2c>
 8002ec6:	6063      	str	r3, [r4, #4]
 8002ec8:	6014      	str	r4, [r2, #0]
 8002eca:	4628      	mov	r0, r5
 8002ecc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ed0:	f7ff bfe4 	b.w	8002e9c <__malloc_unlock>
 8002ed4:	42a3      	cmp	r3, r4
 8002ed6:	d908      	bls.n	8002eea <_free_r+0x42>
 8002ed8:	6820      	ldr	r0, [r4, #0]
 8002eda:	1821      	adds	r1, r4, r0
 8002edc:	428b      	cmp	r3, r1
 8002ede:	bf01      	itttt	eq
 8002ee0:	6819      	ldreq	r1, [r3, #0]
 8002ee2:	685b      	ldreq	r3, [r3, #4]
 8002ee4:	1809      	addeq	r1, r1, r0
 8002ee6:	6021      	streq	r1, [r4, #0]
 8002ee8:	e7ed      	b.n	8002ec6 <_free_r+0x1e>
 8002eea:	461a      	mov	r2, r3
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	b10b      	cbz	r3, 8002ef4 <_free_r+0x4c>
 8002ef0:	42a3      	cmp	r3, r4
 8002ef2:	d9fa      	bls.n	8002eea <_free_r+0x42>
 8002ef4:	6811      	ldr	r1, [r2, #0]
 8002ef6:	1850      	adds	r0, r2, r1
 8002ef8:	42a0      	cmp	r0, r4
 8002efa:	d10b      	bne.n	8002f14 <_free_r+0x6c>
 8002efc:	6820      	ldr	r0, [r4, #0]
 8002efe:	4401      	add	r1, r0
 8002f00:	1850      	adds	r0, r2, r1
 8002f02:	4283      	cmp	r3, r0
 8002f04:	6011      	str	r1, [r2, #0]
 8002f06:	d1e0      	bne.n	8002eca <_free_r+0x22>
 8002f08:	6818      	ldr	r0, [r3, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	4401      	add	r1, r0
 8002f0e:	6011      	str	r1, [r2, #0]
 8002f10:	6053      	str	r3, [r2, #4]
 8002f12:	e7da      	b.n	8002eca <_free_r+0x22>
 8002f14:	d902      	bls.n	8002f1c <_free_r+0x74>
 8002f16:	230c      	movs	r3, #12
 8002f18:	602b      	str	r3, [r5, #0]
 8002f1a:	e7d6      	b.n	8002eca <_free_r+0x22>
 8002f1c:	6820      	ldr	r0, [r4, #0]
 8002f1e:	1821      	adds	r1, r4, r0
 8002f20:	428b      	cmp	r3, r1
 8002f22:	bf01      	itttt	eq
 8002f24:	6819      	ldreq	r1, [r3, #0]
 8002f26:	685b      	ldreq	r3, [r3, #4]
 8002f28:	1809      	addeq	r1, r1, r0
 8002f2a:	6021      	streq	r1, [r4, #0]
 8002f2c:	6063      	str	r3, [r4, #4]
 8002f2e:	6054      	str	r4, [r2, #4]
 8002f30:	e7cb      	b.n	8002eca <_free_r+0x22>
 8002f32:	bd38      	pop	{r3, r4, r5, pc}
 8002f34:	20000134 	.word	0x20000134

08002f38 <_read_r>:
 8002f38:	b538      	push	{r3, r4, r5, lr}
 8002f3a:	4604      	mov	r4, r0
 8002f3c:	4608      	mov	r0, r1
 8002f3e:	4611      	mov	r1, r2
 8002f40:	2200      	movs	r2, #0
 8002f42:	4d05      	ldr	r5, [pc, #20]	; (8002f58 <_read_r+0x20>)
 8002f44:	602a      	str	r2, [r5, #0]
 8002f46:	461a      	mov	r2, r3
 8002f48:	f7fd faf1 	bl	800052e <_read>
 8002f4c:	1c43      	adds	r3, r0, #1
 8002f4e:	d102      	bne.n	8002f56 <_read_r+0x1e>
 8002f50:	682b      	ldr	r3, [r5, #0]
 8002f52:	b103      	cbz	r3, 8002f56 <_read_r+0x1e>
 8002f54:	6023      	str	r3, [r4, #0]
 8002f56:	bd38      	pop	{r3, r4, r5, pc}
 8002f58:	2000013c 	.word	0x2000013c

08002f5c <_fstat_r>:
 8002f5c:	b538      	push	{r3, r4, r5, lr}
 8002f5e:	2300      	movs	r3, #0
 8002f60:	4d06      	ldr	r5, [pc, #24]	; (8002f7c <_fstat_r+0x20>)
 8002f62:	4604      	mov	r4, r0
 8002f64:	4608      	mov	r0, r1
 8002f66:	4611      	mov	r1, r2
 8002f68:	602b      	str	r3, [r5, #0]
 8002f6a:	f7fd fb24 	bl	80005b6 <_fstat>
 8002f6e:	1c43      	adds	r3, r0, #1
 8002f70:	d102      	bne.n	8002f78 <_fstat_r+0x1c>
 8002f72:	682b      	ldr	r3, [r5, #0]
 8002f74:	b103      	cbz	r3, 8002f78 <_fstat_r+0x1c>
 8002f76:	6023      	str	r3, [r4, #0]
 8002f78:	bd38      	pop	{r3, r4, r5, pc}
 8002f7a:	bf00      	nop
 8002f7c:	2000013c 	.word	0x2000013c

08002f80 <_isatty_r>:
 8002f80:	b538      	push	{r3, r4, r5, lr}
 8002f82:	2300      	movs	r3, #0
 8002f84:	4d05      	ldr	r5, [pc, #20]	; (8002f9c <_isatty_r+0x1c>)
 8002f86:	4604      	mov	r4, r0
 8002f88:	4608      	mov	r0, r1
 8002f8a:	602b      	str	r3, [r5, #0]
 8002f8c:	f7fd fb22 	bl	80005d4 <_isatty>
 8002f90:	1c43      	adds	r3, r0, #1
 8002f92:	d102      	bne.n	8002f9a <_isatty_r+0x1a>
 8002f94:	682b      	ldr	r3, [r5, #0]
 8002f96:	b103      	cbz	r3, 8002f9a <_isatty_r+0x1a>
 8002f98:	6023      	str	r3, [r4, #0]
 8002f9a:	bd38      	pop	{r3, r4, r5, pc}
 8002f9c:	2000013c 	.word	0x2000013c

08002fa0 <_init>:
 8002fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fa2:	bf00      	nop
 8002fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fa6:	bc08      	pop	{r3}
 8002fa8:	469e      	mov	lr, r3
 8002faa:	4770      	bx	lr

08002fac <_fini>:
 8002fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fae:	bf00      	nop
 8002fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fb2:	bc08      	pop	{r3}
 8002fb4:	469e      	mov	lr, r3
 8002fb6:	4770      	bx	lr
